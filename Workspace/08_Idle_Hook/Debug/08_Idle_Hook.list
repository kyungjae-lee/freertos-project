
08_Idle_Hook.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f3c  08005f3c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f44  08005f44  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014414  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014430  20014430  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001296b  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002be8  00000000  00000000  000329b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  000355a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001060  00000000  00000000  00036778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b7a  00000000  00000000  000377d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013485  00000000  00000000  00058352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5f94  00000000  00000000  0006b7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014176b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049dc  00000000  00000000  001417bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005da4 	.word	0x08005da4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08005da4 	.word	0x08005da4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e10 	.word	0x20012e10

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f103 0208 	add.w	r2, r3, #8
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000580:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f103 0208 	add.w	r2, r3, #8
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f103 0208 	add.w	r2, r3, #8
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005c2:	b480      	push	{r7}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	689a      	ldr	r2, [r3, #8]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	601a      	str	r2, [r3, #0]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800060a:	b480      	push	{r7}
 800060c:	b085      	sub	sp, #20
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000620:	d103      	bne.n	800062a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e00c      	b.n	8000644 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3308      	adds	r3, #8
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	e002      	b.n	8000638 <vListInsert+0x2e>
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	429a      	cmp	r2, r3
 8000642:	d2f6      	bcs.n	8000632 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	6892      	ldr	r2, [r2, #8]
 8000692:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	6852      	ldr	r2, [r2, #4]
 800069c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d103      	bne.n	80006b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	1e5a      	subs	r2, r3, #1
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	; 0x30
 80006d4:	af04      	add	r7, sp, #16
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	4613      	mov	r3, r2
 80006de:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 ffd9 	bl	800169c <pvPortMalloc>
 80006ea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d00e      	beq.n	8000710 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80006f2:	2058      	movs	r0, #88	; 0x58
 80006f4:	f000 ffd2 	bl	800169c <pvPortMalloc>
 80006f8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	631a      	str	r2, [r3, #48]	; 0x30
 8000706:	e005      	b.n	8000714 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000708:	6978      	ldr	r0, [r7, #20]
 800070a:	f001 f8a7 	bl	800185c <vPortFree>
 800070e:	e001      	b.n	8000714 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d013      	beq.n	8000742 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800071a:	88fa      	ldrh	r2, [r7, #6]
 800071c:	2300      	movs	r3, #0
 800071e:	9303      	str	r3, [sp, #12]
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	9302      	str	r3, [sp, #8]
 8000724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	68b9      	ldr	r1, [r7, #8]
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f000 f80e 	bl	8000752 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000736:	69f8      	ldr	r0, [r7, #28]
 8000738:	f000 f8a2 	bl	8000880 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800073c:	2301      	movs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	e002      	b.n	8000748 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000746:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000748:	69bb      	ldr	r3, [r7, #24]
    }
 800074a:	4618      	mov	r0, r3
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b088      	sub	sp, #32
 8000756:	af00      	add	r7, sp, #0
 8000758:	60f8      	str	r0, [r7, #12]
 800075a:	60b9      	str	r1, [r7, #8]
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000762:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	461a      	mov	r2, r3
 800076a:	21a5      	movs	r1, #165	; 0xa5
 800076c:	f005 fb12 	bl	8005d94 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800077a:	3b01      	subs	r3, #1
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000782:	69bb      	ldr	r3, [r7, #24]
 8000784:	f023 0307 	bic.w	r3, r3, #7
 8000788:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	f003 0307 	and.w	r3, r3, #7
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00a      	beq.n	80007aa <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000798:	f383 8811 	msr	BASEPRI, r3
 800079c:	f3bf 8f6f 	isb	sy
 80007a0:	f3bf 8f4f 	dsb	sy
 80007a4:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80007a6:	bf00      	nop
 80007a8:	e7fe      	b.n	80007a8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d01f      	beq.n	80007f0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
 80007b4:	e012      	b.n	80007dc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	4413      	add	r3, r2
 80007bc:	7819      	ldrb	r1, [r3, #0]
 80007be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	4413      	add	r3, r2
 80007c4:	3334      	adds	r3, #52	; 0x34
 80007c6:	460a      	mov	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	4413      	add	r3, r2
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d006      	beq.n	80007e4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3301      	adds	r3, #1
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	2b09      	cmp	r3, #9
 80007e0:	d9e9      	bls.n	80007b6 <prvInitialiseNewTask+0x64>
 80007e2:	e000      	b.n	80007e6 <prvInitialiseNewTask+0x94>
            {
                break;
 80007e4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80007e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80007ee:	e003      	b.n	80007f8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80007f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007f2:	2200      	movs	r2, #0
 80007f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80007f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fa:	2b04      	cmp	r3, #4
 80007fc:	d901      	bls.n	8000802 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80007fe:	2304      	movs	r3, #4
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800080a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800080c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000810:	2200      	movs	r2, #0
 8000812:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000816:	3304      	adds	r3, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fec5 	bl	80005a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800081e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000820:	3318      	adds	r3, #24
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fec0 	bl	80005a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800082c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800082e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000830:	f1c3 0205 	rsb	r2, r3, #5
 8000834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000836:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800083a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800083e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000840:	3350      	adds	r3, #80	; 0x50
 8000842:	2204      	movs	r2, #4
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f005 faa4 	bl	8005d94 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800084c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800084e:	3354      	adds	r3, #84	; 0x54
 8000850:	2201      	movs	r2, #1
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f005 fa9d 	bl	8005d94 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800085a:	683a      	ldr	r2, [r7, #0]
 800085c:	68f9      	ldr	r1, [r7, #12]
 800085e:	69b8      	ldr	r0, [r7, #24]
 8000860:	f000 fc40 	bl	80010e4 <pxPortInitialiseStack>
 8000864:	4602      	mov	r2, r0
 8000866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000868:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086c:	2b00      	cmp	r3, #0
 800086e:	d002      	beq.n	8000876 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000874:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000880:	b5b0      	push	{r4, r5, r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af02      	add	r7, sp, #8
 8000886:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000888:	f000 fddc 	bl	8001444 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800088c:	4b3b      	ldr	r3, [pc, #236]	; (800097c <prvAddNewTaskToReadyList+0xfc>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	4a3a      	ldr	r2, [pc, #232]	; (800097c <prvAddNewTaskToReadyList+0xfc>)
 8000894:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000896:	4b3a      	ldr	r3, [pc, #232]	; (8000980 <prvAddNewTaskToReadyList+0x100>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d109      	bne.n	80008b2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800089e:	4a38      	ldr	r2, [pc, #224]	; (8000980 <prvAddNewTaskToReadyList+0x100>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80008a4:	4b35      	ldr	r3, [pc, #212]	; (800097c <prvAddNewTaskToReadyList+0xfc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d110      	bne.n	80008ce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80008ac:	f000 fb08 	bl	8000ec0 <prvInitialiseTaskLists>
 80008b0:	e00d      	b.n	80008ce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80008b2:	4b34      	ldr	r3, [pc, #208]	; (8000984 <prvAddNewTaskToReadyList+0x104>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d109      	bne.n	80008ce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80008ba:	4b31      	ldr	r3, [pc, #196]	; (8000980 <prvAddNewTaskToReadyList+0x100>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d802      	bhi.n	80008ce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80008c8:	4a2d      	ldr	r2, [pc, #180]	; (8000980 <prvAddNewTaskToReadyList+0x100>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80008ce:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <prvAddNewTaskToReadyList+0x108>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3301      	adds	r3, #1
 80008d4:	4a2c      	ldr	r2, [pc, #176]	; (8000988 <prvAddNewTaskToReadyList+0x108>)
 80008d6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80008d8:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <prvAddNewTaskToReadyList+0x108>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d016      	beq.n	8000914 <prvAddNewTaskToReadyList+0x94>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 f95f 	bl	8003bac <SEGGER_SYSVIEW_OnTaskCreate>
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	461d      	mov	r5, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	461c      	mov	r4, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	1ae3      	subs	r3, r4, r3
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	462b      	mov	r3, r5
 8000910:	f001 f972 	bl	8001bf8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4618      	mov	r0, r3
 8000918:	f003 f9cc 	bl	8003cb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000920:	2201      	movs	r2, #1
 8000922:	409a      	lsls	r2, r3
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <prvAddNewTaskToReadyList+0x10c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4313      	orrs	r3, r2
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <prvAddNewTaskToReadyList+0x10c>)
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000932:	4613      	mov	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <prvAddNewTaskToReadyList+0x110>)
 800093c:	441a      	add	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3304      	adds	r3, #4
 8000942:	4619      	mov	r1, r3
 8000944:	4610      	mov	r0, r2
 8000946:	f7ff fe3c 	bl	80005c2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800094a:	f000 fdab 	bl	80014a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <prvAddNewTaskToReadyList+0x104>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d00e      	beq.n	8000974 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <prvAddNewTaskToReadyList+0x100>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000960:	429a      	cmp	r2, r3
 8000962:	d207      	bcs.n	8000974 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <prvAddNewTaskToReadyList+0x114>)
 8000966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	f3bf 8f4f 	dsb	sy
 8000970:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bdb0      	pop	{r4, r5, r7, pc}
 800097c:	20000110 	.word	0x20000110
 8000980:	20000038 	.word	0x20000038
 8000984:	2000011c 	.word	0x2000011c
 8000988:	2000012c 	.word	0x2000012c
 800098c:	20000118 	.word	0x20000118
 8000990:	2000003c 	.word	0x2000003c
 8000994:	e000ed04 	.word	0xe000ed04

08000998 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d01b      	beq.n	80009e2 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <vTaskDelay+0x68>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d00a      	beq.n	80009c8 <vTaskDelay+0x30>
        __asm volatile
 80009b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b6:	f383 8811 	msr	BASEPRI, r3
 80009ba:	f3bf 8f6f 	isb	sy
 80009be:	f3bf 8f4f 	dsb	sy
 80009c2:	60bb      	str	r3, [r7, #8]
    }
 80009c4:	bf00      	nop
 80009c6:	e7fe      	b.n	80009c6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80009c8:	f000 f87a 	bl	8000ac0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	2023      	movs	r0, #35	; 0x23
 80009d0:	f002 fcf6 	bl	80033c0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80009d4:	2100      	movs	r1, #0
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 fb0c 	bl	8000ff4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80009dc:	f000 f87e 	bl	8000adc <xTaskResumeAll>
 80009e0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d107      	bne.n	80009f8 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <vTaskDelay+0x6c>)
 80009ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	f3bf 8f4f 	dsb	sy
 80009f4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000138 	.word	0x20000138
 8000a04:	e000ed04 	.word	0xe000ed04

08000a08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <vTaskStartScheduler+0x98>)
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2300      	movs	r3, #0
 8000a18:	2282      	movs	r2, #130	; 0x82
 8000a1a:	4922      	ldr	r1, [pc, #136]	; (8000aa4 <vTaskStartScheduler+0x9c>)
 8000a1c:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <vTaskStartScheduler+0xa0>)
 8000a1e:	f7ff fe57 	bl	80006d0 <xTaskCreate>
 8000a22:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d124      	bne.n	8000a74 <vTaskStartScheduler+0x6c>
        __asm volatile
 8000a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a2e:	f383 8811 	msr	BASEPRI, r3
 8000a32:	f3bf 8f6f 	isb	sy
 8000a36:	f3bf 8f4f 	dsb	sy
 8000a3a:	60bb      	str	r3, [r7, #8]
    }
 8000a3c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <vTaskStartScheduler+0xa4>)
 8000a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a44:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <vTaskStartScheduler+0xa8>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <vTaskStartScheduler+0xac>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <vTaskStartScheduler+0xb0>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <vTaskStartScheduler+0x98>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d102      	bne.n	8000a64 <vTaskStartScheduler+0x5c>
 8000a5e:	f003 f889 	bl	8003b74 <SEGGER_SYSVIEW_OnIdle>
 8000a62:	e004      	b.n	8000a6e <vTaskStartScheduler+0x66>
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <vTaskStartScheduler+0xb0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f003 f8e1 	bl	8003c30 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000a6e:	f000 fbc9 	bl	8001204 <xPortStartScheduler>
 8000a72:	e00e      	b.n	8000a92 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a7a:	d10a      	bne.n	8000a92 <vTaskStartScheduler+0x8a>
        __asm volatile
 8000a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a80:	f383 8811 	msr	BASEPRI, r3
 8000a84:	f3bf 8f6f 	isb	sy
 8000a88:	f3bf 8f4f 	dsb	sy
 8000a8c:	607b      	str	r3, [r7, #4]
    }
 8000a8e:	bf00      	nop
 8000a90:	e7fe      	b.n	8000a90 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <vTaskStartScheduler+0xb4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000134 	.word	0x20000134
 8000aa4:	08005dbc 	.word	0x08005dbc
 8000aa8:	08000e8d 	.word	0x08000e8d
 8000aac:	20000130 	.word	0x20000130
 8000ab0:	2000011c 	.word	0x2000011c
 8000ab4:	20000114 	.word	0x20000114
 8000ab8:	20000038 	.word	0x20000038
 8000abc:	20000000 	.word	0x20000000

08000ac0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <vTaskSuspendAll+0x18>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <vTaskSuspendAll+0x18>)
 8000acc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	20000138 	.word	0x20000138

08000adc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000aea:	4b43      	ldr	r3, [pc, #268]	; (8000bf8 <xTaskResumeAll+0x11c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d10a      	bne.n	8000b08 <xTaskResumeAll+0x2c>
        __asm volatile
 8000af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000af6:	f383 8811 	msr	BASEPRI, r3
 8000afa:	f3bf 8f6f 	isb	sy
 8000afe:	f3bf 8f4f 	dsb	sy
 8000b02:	603b      	str	r3, [r7, #0]
    }
 8000b04:	bf00      	nop
 8000b06:	e7fe      	b.n	8000b06 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000b08:	f000 fc9c 	bl	8001444 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <xTaskResumeAll+0x11c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	4a39      	ldr	r2, [pc, #228]	; (8000bf8 <xTaskResumeAll+0x11c>)
 8000b14:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b16:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <xTaskResumeAll+0x11c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d165      	bne.n	8000bea <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000b1e:	4b37      	ldr	r3, [pc, #220]	; (8000bfc <xTaskResumeAll+0x120>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d061      	beq.n	8000bea <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000b26:	e032      	b.n	8000b8e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b28:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <xTaskResumeAll+0x124>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3318      	adds	r3, #24
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fda1 	bl	800067c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fd9c 	bl	800067c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 f8b4 	bl	8003cb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b50:	2201      	movs	r2, #1
 8000b52:	409a      	lsls	r2, r3
 8000b54:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <xTaskResumeAll+0x128>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	4a2a      	ldr	r2, [pc, #168]	; (8000c04 <xTaskResumeAll+0x128>)
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <xTaskResumeAll+0x12c>)
 8000b6c:	441a      	add	r2, r3
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	3304      	adds	r3, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4610      	mov	r0, r2
 8000b76:	f7ff fd24 	bl	80005c2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b7e:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <xTaskResumeAll+0x130>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d302      	bcc.n	8000b8e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8000b88:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <xTaskResumeAll+0x134>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <xTaskResumeAll+0x124>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1c8      	bne.n	8000b28 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000b9c:	f000 fa0e 	bl	8000fbc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <xTaskResumeAll+0x138>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d010      	beq.n	8000bce <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000bac:	f000 f848 	bl	8000c40 <xTaskIncrementTick>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <xTaskResumeAll+0x134>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1f1      	bne.n	8000bac <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <xTaskResumeAll+0x138>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <xTaskResumeAll+0x134>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d009      	beq.n	8000bea <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <xTaskResumeAll+0x13c>)
 8000bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	f3bf 8f4f 	dsb	sy
 8000be6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000bea:	f000 fc5b 	bl	80014a4 <vPortExitCritical>

    return xAlreadyYielded;
 8000bee:	68bb      	ldr	r3, [r7, #8]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000138 	.word	0x20000138
 8000bfc:	20000110 	.word	0x20000110
 8000c00:	200000d0 	.word	0x200000d0
 8000c04:	20000118 	.word	0x20000118
 8000c08:	2000003c 	.word	0x2000003c
 8000c0c:	20000038 	.word	0x20000038
 8000c10:	20000124 	.word	0x20000124
 8000c14:	20000120 	.word	0x20000120
 8000c18:	e000ed04 	.word	0xe000ed04

08000c1c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000c22:	f000 fcfb 	bl	800161c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <xTaskGetTickCountFromISR+0x20>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000c30:	683b      	ldr	r3, [r7, #0]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000114 	.word	0x20000114

08000c40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c4a:	4b50      	ldr	r3, [pc, #320]	; (8000d8c <xTaskIncrementTick+0x14c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f040 8092 	bne.w	8000d78 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000c54:	4b4e      	ldr	r3, [pc, #312]	; (8000d90 <xTaskIncrementTick+0x150>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000c5c:	4a4c      	ldr	r2, [pc, #304]	; (8000d90 <xTaskIncrementTick+0x150>)
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d120      	bne.n	8000caa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000c68:	4b4a      	ldr	r3, [pc, #296]	; (8000d94 <xTaskIncrementTick+0x154>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00a      	beq.n	8000c88 <xTaskIncrementTick+0x48>
        __asm volatile
 8000c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c76:	f383 8811 	msr	BASEPRI, r3
 8000c7a:	f3bf 8f6f 	isb	sy
 8000c7e:	f3bf 8f4f 	dsb	sy
 8000c82:	603b      	str	r3, [r7, #0]
    }
 8000c84:	bf00      	nop
 8000c86:	e7fe      	b.n	8000c86 <xTaskIncrementTick+0x46>
 8000c88:	4b42      	ldr	r3, [pc, #264]	; (8000d94 <xTaskIncrementTick+0x154>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b42      	ldr	r3, [pc, #264]	; (8000d98 <xTaskIncrementTick+0x158>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a40      	ldr	r2, [pc, #256]	; (8000d94 <xTaskIncrementTick+0x154>)
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	4a40      	ldr	r2, [pc, #256]	; (8000d98 <xTaskIncrementTick+0x158>)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4b3f      	ldr	r3, [pc, #252]	; (8000d9c <xTaskIncrementTick+0x15c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	4a3e      	ldr	r2, [pc, #248]	; (8000d9c <xTaskIncrementTick+0x15c>)
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	f000 f989 	bl	8000fbc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <xTaskIncrementTick+0x160>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d34c      	bcc.n	8000d4e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000cb4:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <xTaskIncrementTick+0x154>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d104      	bne.n	8000cc8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000cbe:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <xTaskIncrementTick+0x160>)
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc4:	601a      	str	r2, [r3, #0]
                    break;
 8000cc6:	e042      	b.n	8000d4e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cc8:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <xTaskIncrementTick+0x154>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d203      	bcs.n	8000ce8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000ce0:	4a2f      	ldr	r2, [pc, #188]	; (8000da0 <xTaskIncrementTick+0x160>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000ce6:	e032      	b.n	8000d4e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	3304      	adds	r3, #4
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fcc5 	bl	800067c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d004      	beq.n	8000d04 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3318      	adds	r3, #24
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fcbc 	bl	800067c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 ffd4 	bl	8003cb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d10:	2201      	movs	r2, #1
 8000d12:	409a      	lsls	r2, r3
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <xTaskIncrementTick+0x164>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	4a22      	ldr	r2, [pc, #136]	; (8000da4 <xTaskIncrementTick+0x164>)
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4a1f      	ldr	r2, [pc, #124]	; (8000da8 <xTaskIncrementTick+0x168>)
 8000d2c:	441a      	add	r2, r3
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	3304      	adds	r3, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4610      	mov	r0, r2
 8000d36:	f7ff fc44 	bl	80005c2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <xTaskIncrementTick+0x16c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d3b5      	bcc.n	8000cb4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d4c:	e7b2      	b.n	8000cb4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <xTaskIncrementTick+0x16c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d54:	4914      	ldr	r1, [pc, #80]	; (8000da8 <xTaskIncrementTick+0x168>)
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	440b      	add	r3, r1
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d901      	bls.n	8000d6a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8000d66:	2301      	movs	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <xTaskIncrementTick+0x170>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d007      	beq.n	8000d82 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8000d72:	2301      	movs	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	e004      	b.n	8000d82 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <xTaskIncrementTick+0x174>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <xTaskIncrementTick+0x174>)
 8000d80:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000d82:	697b      	ldr	r3, [r7, #20]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000138 	.word	0x20000138
 8000d90:	20000114 	.word	0x20000114
 8000d94:	200000c8 	.word	0x200000c8
 8000d98:	200000cc 	.word	0x200000cc
 8000d9c:	20000128 	.word	0x20000128
 8000da0:	20000130 	.word	0x20000130
 8000da4:	20000118 	.word	0x20000118
 8000da8:	2000003c 	.word	0x2000003c
 8000dac:	20000038 	.word	0x20000038
 8000db0:	20000124 	.word	0x20000124
 8000db4:	20000120 	.word	0x20000120

08000db8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <vTaskSwitchContext+0xbc>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <vTaskSwitchContext+0xc0>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000dcc:	e04d      	b.n	8000e6a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8000dce:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <vTaskSwitchContext+0xc0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <vTaskSwitchContext+0xc4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	fab3 f383 	clz	r3, r3
 8000de0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000de2:	7afb      	ldrb	r3, [r7, #11]
 8000de4:	f1c3 031f 	rsb	r3, r3, #31
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	4925      	ldr	r1, [pc, #148]	; (8000e80 <vTaskSwitchContext+0xc8>)
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	440b      	add	r3, r1
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10a      	bne.n	8000e14 <vTaskSwitchContext+0x5c>
        __asm volatile
 8000dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e02:	f383 8811 	msr	BASEPRI, r3
 8000e06:	f3bf 8f6f 	isb	sy
 8000e0a:	f3bf 8f4f 	dsb	sy
 8000e0e:	607b      	str	r3, [r7, #4]
    }
 8000e10:	bf00      	nop
 8000e12:	e7fe      	b.n	8000e12 <vTaskSwitchContext+0x5a>
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4a18      	ldr	r2, [pc, #96]	; (8000e80 <vTaskSwitchContext+0xc8>)
 8000e20:	4413      	add	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	3308      	adds	r3, #8
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d104      	bne.n	8000e44 <vTaskSwitchContext+0x8c>
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <vTaskSwitchContext+0xcc>)
 8000e4c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <vTaskSwitchContext+0xcc>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <vTaskSwitchContext+0xd0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d102      	bne.n	8000e60 <vTaskSwitchContext+0xa8>
 8000e5a:	f002 fe8b 	bl	8003b74 <SEGGER_SYSVIEW_OnIdle>
}
 8000e5e:	e004      	b.n	8000e6a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <vTaskSwitchContext+0xcc>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 fee3 	bl	8003c30 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000138 	.word	0x20000138
 8000e78:	20000124 	.word	0x20000124
 8000e7c:	20000118 	.word	0x20000118
 8000e80:	2000003c 	.word	0x2000003c
 8000e84:	20000038 	.word	0x20000038
 8000e88:	20000134 	.word	0x20000134

08000e8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000e94:	f000 f854 	bl	8000f40 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <prvIdleTask+0x2c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d907      	bls.n	8000eb0 <prvIdleTask+0x24>
                {
                    taskYIELD();
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <prvIdleTask+0x30>)
 8000ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	f3bf 8f4f 	dsb	sy
 8000eac:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8000eb0:	f003 fb9a 	bl	80045e8 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8000eb4:	e7ee      	b.n	8000e94 <prvIdleTask+0x8>
 8000eb6:	bf00      	nop
 8000eb8:	2000003c 	.word	0x2000003c
 8000ebc:	e000ed04 	.word	0xe000ed04

08000ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	e00c      	b.n	8000ee6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <prvInitialiseTaskLists+0x60>)
 8000ed8:	4413      	add	r3, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fb44 	bl	8000568 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d9ef      	bls.n	8000ecc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <prvInitialiseTaskLists+0x64>)
 8000eee:	f7ff fb3b 	bl	8000568 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000ef2:	480d      	ldr	r0, [pc, #52]	; (8000f28 <prvInitialiseTaskLists+0x68>)
 8000ef4:	f7ff fb38 	bl	8000568 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <prvInitialiseTaskLists+0x6c>)
 8000efa:	f7ff fb35 	bl	8000568 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000efe:	480c      	ldr	r0, [pc, #48]	; (8000f30 <prvInitialiseTaskLists+0x70>)
 8000f00:	f7ff fb32 	bl	8000568 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <prvInitialiseTaskLists+0x74>)
 8000f06:	f7ff fb2f 	bl	8000568 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <prvInitialiseTaskLists+0x78>)
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <prvInitialiseTaskLists+0x64>)
 8000f0e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <prvInitialiseTaskLists+0x7c>)
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <prvInitialiseTaskLists+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000003c 	.word	0x2000003c
 8000f24:	200000a0 	.word	0x200000a0
 8000f28:	200000b4 	.word	0x200000b4
 8000f2c:	200000d0 	.word	0x200000d0
 8000f30:	200000e4 	.word	0x200000e4
 8000f34:	200000fc 	.word	0x200000fc
 8000f38:	200000c8 	.word	0x200000c8
 8000f3c:	200000cc 	.word	0x200000cc

08000f40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000f46:	e019      	b.n	8000f7c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000f48:	f000 fa7c 	bl	8001444 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <prvCheckTasksWaitingTermination+0x50>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3304      	adds	r3, #4
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fb8f 	bl	800067c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <prvCheckTasksWaitingTermination+0x54>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <prvCheckTasksWaitingTermination+0x54>)
 8000f66:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <prvCheckTasksWaitingTermination+0x58>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <prvCheckTasksWaitingTermination+0x58>)
 8000f70:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000f72:	f000 fa97 	bl	80014a4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f810 	bl	8000f9c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <prvCheckTasksWaitingTermination+0x58>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1e1      	bne.n	8000f48 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200000e4 	.word	0x200000e4
 8000f94:	20000110 	.word	0x20000110
 8000f98:	200000f8 	.word	0x200000f8

08000f9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fc57 	bl	800185c <vPortFree>
                vPortFree( pxTCB );
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fc54 	bl	800185c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <prvResetNextTaskUnblockTime+0x30>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d104      	bne.n	8000fd4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <prvResetNextTaskUnblockTime+0x34>)
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000fd2:	e005      	b.n	8000fe0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <prvResetNextTaskUnblockTime+0x30>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <prvResetNextTaskUnblockTime+0x34>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	200000c8 	.word	0x200000c8
 8000ff0:	20000130 	.word	0x20000130

08000ff4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000ffe:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001004:	4b31      	ldr	r3, [pc, #196]	; (80010cc <prvAddCurrentTaskToDelayedList+0xd8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3304      	adds	r3, #4
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fb36 	bl	800067c <uxListRemove>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10b      	bne.n	800102e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001016:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <prvAddCurrentTaskToDelayedList+0xd8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	2201      	movs	r2, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4013      	ands	r3, r2
 800102a:	4a29      	ldr	r2, [pc, #164]	; (80010d0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800102c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001034:	d110      	bne.n	8001058 <prvAddCurrentTaskToDelayedList+0x64>
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00d      	beq.n	8001058 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <prvAddCurrentTaskToDelayedList+0xd8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	211b      	movs	r1, #27
 8001042:	4618      	mov	r0, r3
 8001044:	f002 fe78 	bl	8003d38 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001048:	4b20      	ldr	r3, [pc, #128]	; (80010cc <prvAddCurrentTaskToDelayedList+0xd8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3304      	adds	r3, #4
 800104e:	4619      	mov	r1, r3
 8001050:	4820      	ldr	r0, [pc, #128]	; (80010d4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001052:	f7ff fab6 	bl	80005c2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001056:	e032      	b.n	80010be <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <prvAddCurrentTaskToDelayedList+0xd8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d20f      	bcs.n	8001090 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <prvAddCurrentTaskToDelayedList+0xd8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2104      	movs	r1, #4
 8001076:	4618      	mov	r0, r3
 8001078:	f002 fe5e 	bl	8003d38 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <prvAddCurrentTaskToDelayedList+0xd8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3304      	adds	r3, #4
 8001086:	4619      	mov	r1, r3
 8001088:	4610      	mov	r0, r2
 800108a:	f7ff fabe 	bl	800060a <vListInsert>
}
 800108e:	e016      	b.n	80010be <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <prvAddCurrentTaskToDelayedList+0xd8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2104      	movs	r1, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f002 fe4e 	bl	8003d38 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <prvAddCurrentTaskToDelayedList+0xd8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3304      	adds	r3, #4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4610      	mov	r0, r2
 80010aa:	f7ff faae 	bl	800060a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <prvAddCurrentTaskToDelayedList+0xec>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d202      	bcs.n	80010be <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80010b8:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <prvAddCurrentTaskToDelayedList+0xec>)
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	6013      	str	r3, [r2, #0]
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000114 	.word	0x20000114
 80010cc:	20000038 	.word	0x20000038
 80010d0:	20000118 	.word	0x20000118
 80010d4:	200000fc 	.word	0x200000fc
 80010d8:	200000cc 	.word	0x200000cc
 80010dc:	200000c8 	.word	0x200000c8
 80010e0:	20000130 	.word	0x20000130

080010e4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	3b04      	subs	r3, #4
 80010f4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3b04      	subs	r3, #4
 8001102:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	f023 0201 	bic.w	r2, r3, #1
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3b04      	subs	r3, #4
 8001112:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001114:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <pxPortInitialiseStack+0x64>)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b14      	subs	r3, #20
 800111e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3b04      	subs	r3, #4
 800112a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f06f 0202 	mvn.w	r2, #2
 8001132:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3b20      	subs	r3, #32
 8001138:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	0800114d 	.word	0x0800114d

0800114c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <prvTaskExitError+0x54>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800115e:	d00a      	beq.n	8001176 <prvTaskExitError+0x2a>
        __asm volatile
 8001160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001164:	f383 8811 	msr	BASEPRI, r3
 8001168:	f3bf 8f6f 	isb	sy
 800116c:	f3bf 8f4f 	dsb	sy
 8001170:	60fb      	str	r3, [r7, #12]
    }
 8001172:	bf00      	nop
 8001174:	e7fe      	b.n	8001174 <prvTaskExitError+0x28>
        __asm volatile
 8001176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800117a:	f383 8811 	msr	BASEPRI, r3
 800117e:	f3bf 8f6f 	isb	sy
 8001182:	f3bf 8f4f 	dsb	sy
 8001186:	60bb      	str	r3, [r7, #8]
    }
 8001188:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800118a:	bf00      	nop
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0fc      	beq.n	800118c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	20000004 	.word	0x20000004
	...

080011b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <pxCurrentTCBConst2>)
 80011b2:	6819      	ldr	r1, [r3, #0]
 80011b4:	6808      	ldr	r0, [r1, #0]
 80011b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011ba:	f380 8809 	msr	PSP, r0
 80011be:	f3bf 8f6f 	isb	sy
 80011c2:	f04f 0000 	mov.w	r0, #0
 80011c6:	f380 8811 	msr	BASEPRI, r0
 80011ca:	4770      	bx	lr
 80011cc:	f3af 8000 	nop.w

080011d0 <pxCurrentTCBConst2>:
 80011d0:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop

080011d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80011d8:	4808      	ldr	r0, [pc, #32]	; (80011fc <prvPortStartFirstTask+0x24>)
 80011da:	6800      	ldr	r0, [r0, #0]
 80011dc:	6800      	ldr	r0, [r0, #0]
 80011de:	f380 8808 	msr	MSP, r0
 80011e2:	f04f 0000 	mov.w	r0, #0
 80011e6:	f380 8814 	msr	CONTROL, r0
 80011ea:	b662      	cpsie	i
 80011ec:	b661      	cpsie	f
 80011ee:	f3bf 8f4f 	dsb	sy
 80011f2:	f3bf 8f6f 	isb	sy
 80011f6:	df00      	svc	0
 80011f8:	bf00      	nop
 80011fa:	0000      	.short	0x0000
 80011fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop

08001204 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800120a:	4b46      	ldr	r3, [pc, #280]	; (8001324 <xPortStartScheduler+0x120>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a46      	ldr	r2, [pc, #280]	; (8001328 <xPortStartScheduler+0x124>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d10a      	bne.n	800122a <xPortStartScheduler+0x26>
        __asm volatile
 8001214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001218:	f383 8811 	msr	BASEPRI, r3
 800121c:	f3bf 8f6f 	isb	sy
 8001220:	f3bf 8f4f 	dsb	sy
 8001224:	613b      	str	r3, [r7, #16]
    }
 8001226:	bf00      	nop
 8001228:	e7fe      	b.n	8001228 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800122a:	4b3e      	ldr	r3, [pc, #248]	; (8001324 <xPortStartScheduler+0x120>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a3f      	ldr	r2, [pc, #252]	; (800132c <xPortStartScheduler+0x128>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d10a      	bne.n	800124a <xPortStartScheduler+0x46>
        __asm volatile
 8001234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001238:	f383 8811 	msr	BASEPRI, r3
 800123c:	f3bf 8f6f 	isb	sy
 8001240:	f3bf 8f4f 	dsb	sy
 8001244:	60fb      	str	r3, [r7, #12]
    }
 8001246:	bf00      	nop
 8001248:	e7fe      	b.n	8001248 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800124a:	4b39      	ldr	r3, [pc, #228]	; (8001330 <xPortStartScheduler+0x12c>)
 800124c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	22ff      	movs	r2, #255	; 0xff
 800125a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b31      	ldr	r3, [pc, #196]	; (8001334 <xPortStartScheduler+0x130>)
 8001270:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001272:	4b31      	ldr	r3, [pc, #196]	; (8001338 <xPortStartScheduler+0x134>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001278:	e009      	b.n	800128e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <xPortStartScheduler+0x134>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3b01      	subs	r3, #1
 8001280:	4a2d      	ldr	r2, [pc, #180]	; (8001338 <xPortStartScheduler+0x134>)
 8001282:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001296:	2b80      	cmp	r3, #128	; 0x80
 8001298:	d0ef      	beq.n	800127a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800129a:	4b27      	ldr	r3, [pc, #156]	; (8001338 <xPortStartScheduler+0x134>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d00a      	beq.n	80012bc <xPortStartScheduler+0xb8>
        __asm volatile
 80012a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012aa:	f383 8811 	msr	BASEPRI, r3
 80012ae:	f3bf 8f6f 	isb	sy
 80012b2:	f3bf 8f4f 	dsb	sy
 80012b6:	60bb      	str	r3, [r7, #8]
    }
 80012b8:	bf00      	nop
 80012ba:	e7fe      	b.n	80012ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <xPortStartScheduler+0x134>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <xPortStartScheduler+0x134>)
 80012c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <xPortStartScheduler+0x134>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012ce:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <xPortStartScheduler+0x134>)
 80012d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <xPortStartScheduler+0x138>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <xPortStartScheduler+0x138>)
 80012e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <xPortStartScheduler+0x138>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a14      	ldr	r2, [pc, #80]	; (800133c <xPortStartScheduler+0x138>)
 80012ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80012f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80012f2:	f000 f963 	bl	80015bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <xPortStartScheduler+0x13c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80012fc:	f000 f982 	bl	8001604 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <xPortStartScheduler+0x140>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <xPortStartScheduler+0x140>)
 8001306:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800130a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800130c:	f7ff ff64 	bl	80011d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001310:	f7ff fd52 	bl	8000db8 <vTaskSwitchContext>
    prvTaskExitError();
 8001314:	f7ff ff1a 	bl	800114c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00
 8001328:	410fc271 	.word	0x410fc271
 800132c:	410fc270 	.word	0x410fc270
 8001330:	e000e400 	.word	0xe000e400
 8001334:	2000013c 	.word	0x2000013c
 8001338:	20000140 	.word	0x20000140
 800133c:	e000ed20 	.word	0xe000ed20
 8001340:	20000004 	.word	0x20000004
 8001344:	e000ef34 	.word	0xe000ef34

08001348 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <vInitPrioGroupValue+0xe4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a37      	ldr	r2, [pc, #220]	; (8001430 <vInitPrioGroupValue+0xe8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d10a      	bne.n	800136e <vInitPrioGroupValue+0x26>
        __asm volatile
 8001358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800135c:	f383 8811 	msr	BASEPRI, r3
 8001360:	f3bf 8f6f 	isb	sy
 8001364:	f3bf 8f4f 	dsb	sy
 8001368:	613b      	str	r3, [r7, #16]
    }
 800136a:	bf00      	nop
 800136c:	e7fe      	b.n	800136c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <vInitPrioGroupValue+0xe4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a30      	ldr	r2, [pc, #192]	; (8001434 <vInitPrioGroupValue+0xec>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d10a      	bne.n	800138e <vInitPrioGroupValue+0x46>
        __asm volatile
 8001378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800137c:	f383 8811 	msr	BASEPRI, r3
 8001380:	f3bf 8f6f 	isb	sy
 8001384:	f3bf 8f4f 	dsb	sy
 8001388:	60fb      	str	r3, [r7, #12]
    }
 800138a:	bf00      	nop
 800138c:	e7fe      	b.n	800138c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <vInitPrioGroupValue+0xf0>)
 8001390:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	22ff      	movs	r2, #255	; 0xff
 800139e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <vInitPrioGroupValue+0xf4>)
 80013b4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <vInitPrioGroupValue+0xf8>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80013bc:	e009      	b.n	80013d2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <vInitPrioGroupValue+0xf8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <vInitPrioGroupValue+0xf8>)
 80013c6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013da:	2b80      	cmp	r3, #128	; 0x80
 80013dc:	d0ef      	beq.n	80013be <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <vInitPrioGroupValue+0xf8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d00a      	beq.n	8001400 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80013ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ee:	f383 8811 	msr	BASEPRI, r3
 80013f2:	f3bf 8f6f 	isb	sy
 80013f6:	f3bf 8f4f 	dsb	sy
 80013fa:	60bb      	str	r3, [r7, #8]
    }
 80013fc:	bf00      	nop
 80013fe:	e7fe      	b.n	80013fe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <vInitPrioGroupValue+0xf8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <vInitPrioGroupValue+0xf8>)
 8001408:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <vInitPrioGroupValue+0xf8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <vInitPrioGroupValue+0xf8>)
 8001414:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800141e:	bf00      	nop
 8001420:	371c      	adds	r7, #28
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00
 8001430:	410fc271 	.word	0x410fc271
 8001434:	410fc270 	.word	0x410fc270
 8001438:	e000e400 	.word	0xe000e400
 800143c:	2000013c 	.word	0x2000013c
 8001440:	20000140 	.word	0x20000140

08001444 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
        __asm volatile
 800144a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800144e:	f383 8811 	msr	BASEPRI, r3
 8001452:	f3bf 8f6f 	isb	sy
 8001456:	f3bf 8f4f 	dsb	sy
 800145a:	607b      	str	r3, [r7, #4]
    }
 800145c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <vPortEnterCritical+0x58>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <vPortEnterCritical+0x58>)
 8001466:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <vPortEnterCritical+0x58>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d10f      	bne.n	8001490 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <vPortEnterCritical+0x5c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00a      	beq.n	8001490 <vPortEnterCritical+0x4c>
        __asm volatile
 800147a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147e:	f383 8811 	msr	BASEPRI, r3
 8001482:	f3bf 8f6f 	isb	sy
 8001486:	f3bf 8f4f 	dsb	sy
 800148a:	603b      	str	r3, [r7, #0]
    }
 800148c:	bf00      	nop
 800148e:	e7fe      	b.n	800148e <vPortEnterCritical+0x4a>
    }
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	20000004 	.word	0x20000004
 80014a0:	e000ed04 	.word	0xe000ed04

080014a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <vPortExitCritical+0x50>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10a      	bne.n	80014c8 <vPortExitCritical+0x24>
        __asm volatile
 80014b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b6:	f383 8811 	msr	BASEPRI, r3
 80014ba:	f3bf 8f6f 	isb	sy
 80014be:	f3bf 8f4f 	dsb	sy
 80014c2:	607b      	str	r3, [r7, #4]
    }
 80014c4:	bf00      	nop
 80014c6:	e7fe      	b.n	80014c6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <vPortExitCritical+0x50>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <vPortExitCritical+0x50>)
 80014d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <vPortExitCritical+0x50>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d105      	bne.n	80014e6 <vPortExitCritical+0x42>
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80014e4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000004 	.word	0x20000004
	...

08001500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001500:	f3ef 8009 	mrs	r0, PSP
 8001504:	f3bf 8f6f 	isb	sy
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <pxCurrentTCBConst>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	f01e 0f10 	tst.w	lr, #16
 8001510:	bf08      	it	eq
 8001512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800151a:	6010      	str	r0, [r2, #0]
 800151c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001524:	f380 8811 	msr	BASEPRI, r0
 8001528:	f3bf 8f4f 	dsb	sy
 800152c:	f3bf 8f6f 	isb	sy
 8001530:	f7ff fc42 	bl	8000db8 <vTaskSwitchContext>
 8001534:	f04f 0000 	mov.w	r0, #0
 8001538:	f380 8811 	msr	BASEPRI, r0
 800153c:	bc09      	pop	{r0, r3}
 800153e:	6819      	ldr	r1, [r3, #0]
 8001540:	6808      	ldr	r0, [r1, #0]
 8001542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001546:	f01e 0f10 	tst.w	lr, #16
 800154a:	bf08      	it	eq
 800154c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001550:	f380 8809 	msr	PSP, r0
 8001554:	f3bf 8f6f 	isb	sy
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	f3af 8000 	nop.w

08001560 <pxCurrentTCBConst>:
 8001560:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop

08001568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
        __asm volatile
 800156e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001572:	f383 8811 	msr	BASEPRI, r3
 8001576:	f3bf 8f6f 	isb	sy
 800157a:	f3bf 8f4f 	dsb	sy
 800157e:	607b      	str	r3, [r7, #4]
    }
 8001580:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001582:	f002 fa7d 	bl	8003a80 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001586:	f7ff fb5b 	bl	8000c40 <xTaskIncrementTick>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8001590:	f002 fad4 	bl	8003b3c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <SysTick_Handler+0x50>)
 8001596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	e001      	b.n	80015a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800159e:	f002 fab1 	bl	8003b04 <SEGGER_SYSVIEW_RecordExitISR>
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f383 8811 	msr	BASEPRI, r3
    }
 80015ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000ed04 	.word	0xe000ed04

080015bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <vPortSetupTimerInterrupt+0x34>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <vPortSetupTimerInterrupt+0x38>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <vPortSetupTimerInterrupt+0x3c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <vPortSetupTimerInterrupt+0x40>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	099b      	lsrs	r3, r3, #6
 80015d8:	4a09      	ldr	r2, [pc, #36]	; (8001600 <vPortSetupTimerInterrupt+0x44>)
 80015da:	3b01      	subs	r3, #1
 80015dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <vPortSetupTimerInterrupt+0x34>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e010 	.word	0xe000e010
 80015f4:	e000e018 	.word	0xe000e018
 80015f8:	20000010 	.word	0x20000010
 80015fc:	10624dd3 	.word	0x10624dd3
 8001600:	e000e014 	.word	0xe000e014

08001604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001614 <vPortEnableVFP+0x10>
 8001608:	6801      	ldr	r1, [r0, #0]
 800160a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800160e:	6001      	str	r1, [r0, #0]
 8001610:	4770      	bx	lr
 8001612:	0000      	.short	0x0000
 8001614:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop

0800161c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001622:	f3ef 8305 	mrs	r3, IPSR
 8001626:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b0f      	cmp	r3, #15
 800162c:	d914      	bls.n	8001658 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <vPortValidateInterruptPriority+0x70>)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <vPortValidateInterruptPriority+0x74>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	7afa      	ldrb	r2, [r7, #11]
 800163e:	429a      	cmp	r2, r3
 8001640:	d20a      	bcs.n	8001658 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8001642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001646:	f383 8811 	msr	BASEPRI, r3
 800164a:	f3bf 8f6f 	isb	sy
 800164e:	f3bf 8f4f 	dsb	sy
 8001652:	607b      	str	r3, [r7, #4]
    }
 8001654:	bf00      	nop
 8001656:	e7fe      	b.n	8001656 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <vPortValidateInterruptPriority+0x78>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <vPortValidateInterruptPriority+0x7c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d90a      	bls.n	800167e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800166c:	f383 8811 	msr	BASEPRI, r3
 8001670:	f3bf 8f6f 	isb	sy
 8001674:	f3bf 8f4f 	dsb	sy
 8001678:	603b      	str	r3, [r7, #0]
    }
 800167a:	bf00      	nop
 800167c:	e7fe      	b.n	800167c <vPortValidateInterruptPriority+0x60>
    }
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e3f0 	.word	0xe000e3f0
 8001690:	2000013c 	.word	0x2000013c
 8001694:	e000ed0c 	.word	0xe000ed0c
 8001698:	20000140 	.word	0x20000140

0800169c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80016a8:	f7ff fa0a 	bl	8000ac0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80016ac:	4b65      	ldr	r3, [pc, #404]	; (8001844 <pvPortMalloc+0x1a8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80016b4:	f000 f934 	bl	8001920 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80016b8:	4b63      	ldr	r3, [pc, #396]	; (8001848 <pvPortMalloc+0x1ac>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f040 80a7 	bne.w	8001814 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d02d      	beq.n	8001728 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80016cc:	2208      	movs	r2, #8
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d227      	bcs.n	8001728 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80016d8:	2208      	movs	r2, #8
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d021      	beq.n	800172e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f023 0307 	bic.w	r3, r3, #7
 80016f0:	3308      	adds	r3, #8
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d214      	bcs.n	8001722 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f023 0307 	bic.w	r3, r3, #7
 80016fe:	3308      	adds	r3, #8
 8001700:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	2b00      	cmp	r3, #0
 800170a:	d010      	beq.n	800172e <pvPortMalloc+0x92>
        __asm volatile
 800170c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001710:	f383 8811 	msr	BASEPRI, r3
 8001714:	f3bf 8f6f 	isb	sy
 8001718:	f3bf 8f4f 	dsb	sy
 800171c:	617b      	str	r3, [r7, #20]
    }
 800171e:	bf00      	nop
 8001720:	e7fe      	b.n	8001720 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001726:	e002      	b.n	800172e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	e000      	b.n	8001730 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800172e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d06e      	beq.n	8001814 <pvPortMalloc+0x178>
 8001736:	4b45      	ldr	r3, [pc, #276]	; (800184c <pvPortMalloc+0x1b0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	d869      	bhi.n	8001814 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001740:	4b43      	ldr	r3, [pc, #268]	; (8001850 <pvPortMalloc+0x1b4>)
 8001742:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001744:	4b42      	ldr	r3, [pc, #264]	; (8001850 <pvPortMalloc+0x1b4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800174a:	e004      	b.n	8001756 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	d903      	bls.n	8001768 <pvPortMalloc+0xcc>
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f1      	bne.n	800174c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001768:	4b36      	ldr	r3, [pc, #216]	; (8001844 <pvPortMalloc+0x1a8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176e:	429a      	cmp	r2, r3
 8001770:	d050      	beq.n	8001814 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2208      	movs	r2, #8
 8001778:	4413      	add	r3, r2
 800177a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	1ad2      	subs	r2, r2, r3
 800178c:	2308      	movs	r3, #8
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	429a      	cmp	r2, r3
 8001792:	d91f      	bls.n	80017d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00a      	beq.n	80017bc <pvPortMalloc+0x120>
        __asm volatile
 80017a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017aa:	f383 8811 	msr	BASEPRI, r3
 80017ae:	f3bf 8f6f 	isb	sy
 80017b2:	f3bf 8f4f 	dsb	sy
 80017b6:	613b      	str	r3, [r7, #16]
    }
 80017b8:	bf00      	nop
 80017ba:	e7fe      	b.n	80017ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	1ad2      	subs	r2, r2, r3
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80017ce:	69b8      	ldr	r0, [r7, #24]
 80017d0:	f000 f908 	bl	80019e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <pvPortMalloc+0x1b0>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	4a1b      	ldr	r2, [pc, #108]	; (800184c <pvPortMalloc+0x1b0>)
 80017e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <pvPortMalloc+0x1b0>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <pvPortMalloc+0x1b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d203      	bcs.n	80017f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <pvPortMalloc+0x1b0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a18      	ldr	r2, [pc, #96]	; (8001854 <pvPortMalloc+0x1b8>)
 80017f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <pvPortMalloc+0x1ac>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	431a      	orrs	r2, r3
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <pvPortMalloc+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <pvPortMalloc+0x1bc>)
 8001812:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001814:	f7ff f962 	bl	8000adc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00a      	beq.n	8001838 <pvPortMalloc+0x19c>
        __asm volatile
 8001822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001826:	f383 8811 	msr	BASEPRI, r3
 800182a:	f3bf 8f6f 	isb	sy
 800182e:	f3bf 8f4f 	dsb	sy
 8001832:	60fb      	str	r3, [r7, #12]
    }
 8001834:	bf00      	nop
 8001836:	e7fe      	b.n	8001836 <pvPortMalloc+0x19a>
    return pvReturn;
 8001838:	69fb      	ldr	r3, [r7, #28]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3728      	adds	r7, #40	; 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20012d4c 	.word	0x20012d4c
 8001848:	20012d60 	.word	0x20012d60
 800184c:	20012d50 	.word	0x20012d50
 8001850:	20012d44 	.word	0x20012d44
 8001854:	20012d54 	.word	0x20012d54
 8001858:	20012d58 	.word	0x20012d58

0800185c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d04d      	beq.n	800190a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800186e:	2308      	movs	r3, #8
 8001870:	425b      	negs	r3, r3
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4413      	add	r3, r2
 8001876:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <vPortFree+0xb8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10a      	bne.n	80018a0 <vPortFree+0x44>
        __asm volatile
 800188a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800188e:	f383 8811 	msr	BASEPRI, r3
 8001892:	f3bf 8f6f 	isb	sy
 8001896:	f3bf 8f4f 	dsb	sy
 800189a:	60fb      	str	r3, [r7, #12]
    }
 800189c:	bf00      	nop
 800189e:	e7fe      	b.n	800189e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00a      	beq.n	80018be <vPortFree+0x62>
        __asm volatile
 80018a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ac:	f383 8811 	msr	BASEPRI, r3
 80018b0:	f3bf 8f6f 	isb	sy
 80018b4:	f3bf 8f4f 	dsb	sy
 80018b8:	60bb      	str	r3, [r7, #8]
    }
 80018ba:	bf00      	nop
 80018bc:	e7fe      	b.n	80018bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <vPortFree+0xb8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d01e      	beq.n	800190a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d11a      	bne.n	800190a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <vPortFree+0xb8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80018e4:	f7ff f8ec 	bl	8000ac0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <vPortFree+0xbc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a09      	ldr	r2, [pc, #36]	; (8001918 <vPortFree+0xbc>)
 80018f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80018f6:	6938      	ldr	r0, [r7, #16]
 80018f8:	f000 f874 	bl	80019e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <vPortFree+0xc0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	4a06      	ldr	r2, [pc, #24]	; (800191c <vPortFree+0xc0>)
 8001904:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001906:	f7ff f8e9 	bl	8000adc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20012d60 	.word	0x20012d60
 8001918:	20012d50 	.word	0x20012d50
 800191c:	20012d5c 	.word	0x20012d5c

08001920 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001926:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800192a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800192c:	4b27      	ldr	r3, [pc, #156]	; (80019cc <prvHeapInit+0xac>)
 800192e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00c      	beq.n	8001954 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3307      	adds	r3, #7
 800193e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f023 0307 	bic.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <prvHeapInit+0xac>)
 8001950:	4413      	add	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001958:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <prvHeapInit+0xb0>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <prvHeapInit+0xb0>)
 8001960:	2200      	movs	r2, #0
 8001962:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	4413      	add	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800196c:	2208      	movs	r2, #8
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f023 0307 	bic.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <prvHeapInit+0xb4>)
 8001980:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <prvHeapInit+0xb4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2200      	movs	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <prvHeapInit+0xb4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	1ad2      	subs	r2, r2, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <prvHeapInit+0xb4>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <prvHeapInit+0xb8>)
 80019ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a09      	ldr	r2, [pc, #36]	; (80019dc <prvHeapInit+0xbc>)
 80019b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <prvHeapInit+0xc0>)
 80019ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019be:	601a      	str	r2, [r3, #0]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	20000144 	.word	0x20000144
 80019d0:	20012d44 	.word	0x20012d44
 80019d4:	20012d4c 	.word	0x20012d4c
 80019d8:	20012d54 	.word	0x20012d54
 80019dc:	20012d50 	.word	0x20012d50
 80019e0:	20012d60 	.word	0x20012d60

080019e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80019ec:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <prvInsertBlockIntoFreeList+0xac>)
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e002      	b.n	80019f8 <prvInsertBlockIntoFreeList+0x14>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d8f7      	bhi.n	80019f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d108      	bne.n	8001a26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	441a      	add	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	441a      	add	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d118      	bne.n	8001a6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <prvInsertBlockIntoFreeList+0xb0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d00d      	beq.n	8001a62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	441a      	add	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	e008      	b.n	8001a74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <prvInsertBlockIntoFreeList+0xb0>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e003      	b.n	8001a74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d002      	beq.n	8001a82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20012d44 	.word	0x20012d44
 8001a94:	20012d4c 	.word	0x20012d4c

08001a98 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001a9c:	4803      	ldr	r0, [pc, #12]	; (8001aac <_cbSendSystemDesc+0x14>)
 8001a9e:	f001 ff99 	bl	80039d4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001aa2:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <_cbSendSystemDesc+0x18>)
 8001aa4:	f001 ff96 	bl	80039d4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	08005dc4 	.word	0x08005dc4
 8001ab0:	08005e08 	.word	0x08005e08

08001ab4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <SEGGER_SYSVIEW_Conf+0x20>)
 8001abe:	6819      	ldr	r1, [r3, #0]
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SEGGER_SYSVIEW_Conf+0x24>)
 8001ac2:	4a06      	ldr	r2, [pc, #24]	; (8001adc <SEGGER_SYSVIEW_Conf+0x28>)
 8001ac4:	f001 fc0a 	bl	80032dc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001ac8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001acc:	f001 fc4a 	bl	8003364 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000010 	.word	0x20000010
 8001ad8:	08001a99 	.word	0x08001a99
 8001adc:	08005efc 	.word	0x08005efc

08001ae0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	e033      	b.n	8001b54 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001aec:	491e      	ldr	r1, [pc, #120]	; (8001b68 <_cbSendTaskList+0x88>)
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	491a      	ldr	r1, [pc, #104]	; (8001b68 <_cbSendTaskList+0x88>)
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	4c16      	ldr	r4, [pc, #88]	; (8001b68 <_cbSendTaskList+0x88>)
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4423      	add	r3, r4
 8001b1c:	3308      	adds	r3, #8
 8001b1e:	681c      	ldr	r4, [r3, #0]
 8001b20:	4d11      	ldr	r5, [pc, #68]	; (8001b68 <_cbSendTaskList+0x88>)
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	442b      	add	r3, r5
 8001b2e:	330c      	adds	r3, #12
 8001b30:	681d      	ldr	r5, [r3, #0]
 8001b32:	4e0d      	ldr	r6, [pc, #52]	; (8001b68 <_cbSendTaskList+0x88>)
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4433      	add	r3, r6
 8001b40:	3310      	adds	r3, #16
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	462b      	mov	r3, r5
 8001b48:	4622      	mov	r2, r4
 8001b4a:	f000 f8bd 	bl	8001cc8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3301      	adds	r3, #1
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <_cbSendTaskList+0x8c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d3c6      	bcc.n	8001aec <_cbSendTaskList+0xc>
  }
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b68:	20012d64 	.word	0x20012d64
 8001b6c:	20012e04 	.word	0x20012e04

08001b70 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001b78:	f7ff f850 	bl	8000c1c <xTaskGetTickCountFromISR>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2200      	movs	r2, #0
 8001b80:	469a      	mov	sl, r3
 8001b82:	4693      	mov	fp, r2
 8001b84:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001b88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	f04f 0a00 	mov.w	sl, #0
 8001b94:	f04f 0b00 	mov.w	fp, #0
 8001b98:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001b9c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001ba0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001ba4:	4652      	mov	r2, sl
 8001ba6:	465b      	mov	r3, fp
 8001ba8:	1a14      	subs	r4, r2, r0
 8001baa:	eb63 0501 	sbc.w	r5, r3, r1
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	00ab      	lsls	r3, r5, #2
 8001bb8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001bbc:	00a2      	lsls	r2, r4, #2
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	461d      	mov	r5, r3
 8001bc2:	eb14 0800 	adds.w	r8, r4, r0
 8001bc6:	eb45 0901 	adc.w	r9, r5, r1
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bde:	4690      	mov	r8, r2
 8001be0:	4699      	mov	r9, r3
 8001be2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001be6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001bea:	4610      	mov	r0, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001bf8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af02      	add	r7, sp, #8
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001c06:	2205      	movs	r2, #5
 8001c08:	492b      	ldr	r1, [pc, #172]	; (8001cb8 <SYSVIEW_AddTask+0xc0>)
 8001c0a:	68b8      	ldr	r0, [r7, #8]
 8001c0c:	f004 f8a4 	bl	8005d58 <memcmp>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d04b      	beq.n	8001cae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <SYSVIEW_AddTask+0xc4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b07      	cmp	r3, #7
 8001c1c:	d903      	bls.n	8001c26 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001c1e:	4828      	ldr	r0, [pc, #160]	; (8001cc0 <SYSVIEW_AddTask+0xc8>)
 8001c20:	f002 f9da 	bl	8003fd8 <SEGGER_SYSVIEW_Warn>
    return;
 8001c24:	e044      	b.n	8001cb0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <SYSVIEW_AddTask+0xc4>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4926      	ldr	r1, [pc, #152]	; (8001cc4 <SYSVIEW_AddTask+0xcc>)
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <SYSVIEW_AddTask+0xc4>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4921      	ldr	r1, [pc, #132]	; (8001cc4 <SYSVIEW_AddTask+0xcc>)
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <SYSVIEW_AddTask+0xc4>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	491b      	ldr	r1, [pc, #108]	; (8001cc4 <SYSVIEW_AddTask+0xcc>)
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	3308      	adds	r3, #8
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <SYSVIEW_AddTask+0xc4>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4916      	ldr	r1, [pc, #88]	; (8001cc4 <SYSVIEW_AddTask+0xcc>)
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	330c      	adds	r3, #12
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <SYSVIEW_AddTask+0xc4>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4910      	ldr	r1, [pc, #64]	; (8001cc4 <SYSVIEW_AddTask+0xcc>)
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3310      	adds	r3, #16
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <SYSVIEW_AddTask+0xc4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	3301      	adds	r3, #1
 8001c98:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <SYSVIEW_AddTask+0xc4>)
 8001c9a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f80e 	bl	8001cc8 <SYSVIEW_SendTaskInfo>
 8001cac:	e000      	b.n	8001cb0 <SYSVIEW_AddTask+0xb8>
    return;
 8001cae:	bf00      	nop

}
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	08005e18 	.word	0x08005e18
 8001cbc:	20012e04 	.word	0x20012e04
 8001cc0:	08005e20 	.word	0x08005e20
 8001cc4:	20012d64 	.word	0x20012d64

08001cc8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	2214      	movs	r2, #20
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 f858 	bl	8005d94 <memset>
  TaskInfo.TaskID     = TaskID;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f001 fd71 	bl	80037e4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8001da2:	f002 f975 	bl	8004090 <SEGGER_SYSVIEW_IsStarted>
 8001da6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8001dae:	f001 fb9d 	bl	80034ec <SEGGER_SYSVIEW_Start>
  }
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <_cbOnUARTRx+0x3c>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d806      	bhi.n	8001ddc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <_cbOnUARTRx+0x3c>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <_cbOnUARTRx+0x3c>)
 8001dd8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8001dda:	e009      	b.n	8001df0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8001ddc:	f7ff ffde 	bl	8001d9c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <_cbOnUARTRx+0x3c>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	2201      	movs	r2, #1
 8001dea:	4619      	mov	r1, r3
 8001dec:	f000 fb9a 	bl	8002524 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8001df0:	bf00      	nop
}
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000008 	.word	0x20000008

08001dfc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <_cbOnUARTTx+0x5c>)
 8001e06:	785b      	ldrb	r3, [r3, #1]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d80f      	bhi.n	8001e2c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <_cbOnUARTTx+0x5c>)
 8001e0e:	785b      	ldrb	r3, [r3, #1]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <_cbOnUARTTx+0x60>)
 8001e14:	5c9a      	ldrb	r2, [r3, r2]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <_cbOnUARTTx+0x5c>)
 8001e1c:	785b      	ldrb	r3, [r3, #1]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <_cbOnUARTTx+0x5c>)
 8001e24:	705a      	strb	r2, [r3, #1]
    r = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
    goto Done;
 8001e2a:	e00f      	b.n	8001e4c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <_cbOnUARTTx+0x5c>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fa19 	bl	800226c <SEGGER_RTT_ReadUpBufferNoLock>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da02      	bge.n	8001e4a <_cbOnUARTTx+0x4e>
    r = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	e000      	b.n	8001e4c <_cbOnUARTTx+0x50>
  }
Done:
 8001e4a:	bf00      	nop
  return r;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	08005f04 	.word	0x08005f04

08001e60 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <SEGGER_UART_init+0x1c>)
 8001e6a:	4905      	ldr	r1, [pc, #20]	; (8001e80 <SEGGER_UART_init+0x20>)
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f863 	bl	8001f38 <HIF_UART_Init>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	08001dbd 	.word	0x08001dbd
 8001e80:	08001dfd 	.word	0x08001dfd

08001e84 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <USART2_IRQHandler+0x80>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d011      	beq.n	8001ebe <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <USART2_IRQHandler+0x84>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 030b 	and.w	r3, r3, #11
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d108      	bne.n	8001ebe <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8001eac:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <USART2_IRQHandler+0x88>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8001eb4:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <USART2_IRQHandler+0x88>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	79fa      	ldrb	r2, [r7, #7]
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01a      	beq.n	8001efe <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <USART2_IRQHandler+0x8c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d015      	beq.n	8001efc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <USART2_IRQHandler+0x8c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	1dfa      	adds	r2, r7, #7
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4798      	blx	r3
 8001eda:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <USART2_IRQHandler+0x90>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <USART2_IRQHandler+0x90>)
 8001ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e006      	b.n	8001efe <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <USART2_IRQHandler+0x80>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8001ef4:	79fa      	ldrb	r2, [r7, #7]
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <USART2_IRQHandler+0x84>)
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e000      	b.n	8001efe <USART2_IRQHandler+0x7a>
      return;
 8001efc:	bf00      	nop
    }
  }
}
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40004400 	.word	0x40004400
 8001f08:	40004404 	.word	0x40004404
 8001f0c:	20012e08 	.word	0x20012e08
 8001f10:	20012e0c 	.word	0x20012e0c
 8001f14:	4000440c 	.word	0x4000440c

08001f18 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	4000440c 	.word	0x4000440c

08001f38 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8001f44:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <HIF_UART_Init+0xc8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a2d      	ldr	r2, [pc, #180]	; (8002000 <HIF_UART_Init+0xc8>)
 8001f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8001f50:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HIF_UART_Init+0xcc>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a2b      	ldr	r2, [pc, #172]	; (8002004 <HIF_UART_Init+0xcc>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <HIF_UART_Init+0xd0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f68:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001f70:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8001f72:	4a25      	ldr	r2, [pc, #148]	; (8002008 <HIF_UART_Init+0xd0>)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8001f78:	4b24      	ldr	r3, [pc, #144]	; (800200c <HIF_UART_Init+0xd4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f84:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001f8c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8001f8e:	4a1f      	ldr	r2, [pc, #124]	; (800200c <HIF_UART_Init+0xd4>)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8001f94:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <HIF_UART_Init+0xd8>)
 8001f96:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8001f9a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HIF_UART_Init+0xdc>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HIF_UART_Init+0xe0>)
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8001fae:	4a1b      	ldr	r2, [pc, #108]	; (800201c <HIF_UART_Init+0xe4>)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	085b      	lsrs	r3, r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc6:	d302      	bcc.n	8001fce <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8001fc8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001fcc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d004      	beq.n	8001fde <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	4a11      	ldr	r2, [pc, #68]	; (8002020 <HIF_UART_Init+0xe8>)
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8001fde:	4a11      	ldr	r2, [pc, #68]	; (8002024 <HIF_UART_Init+0xec>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8001fe4:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HIF_UART_Init+0xf0>)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8001fea:	2106      	movs	r1, #6
 8001fec:	2026      	movs	r0, #38	; 0x26
 8001fee:	f7ff feab 	bl	8001d48 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8001ff2:	2026      	movs	r0, #38	; 0x26
 8001ff4:	f7ff fe8a 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001ff8:	bf00      	nop
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023840 	.word	0x40023840
 8002004:	40023830 	.word	0x40023830
 8002008:	40020020 	.word	0x40020020
 800200c:	40020000 	.word	0x40020000
 8002010:	4000440c 	.word	0x4000440c
 8002014:	40004410 	.word	0x40004410
 8002018:	40004414 	.word	0x40004414
 800201c:	0501bd00 	.word	0x0501bd00
 8002020:	40004408 	.word	0x40004408
 8002024:	20012e08 	.word	0x20012e08
 8002028:	20012e0c 	.word	0x20012e0c

0800202c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <_DoInit+0x98>)
 8002034:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2203      	movs	r2, #3
 800203a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2203      	movs	r2, #3
 8002040:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a20      	ldr	r2, [pc, #128]	; (80020c8 <_DoInit+0x9c>)
 8002046:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a20      	ldr	r2, [pc, #128]	; (80020cc <_DoInit+0xa0>)
 800204c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002054:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <_DoInit+0x9c>)
 800206c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <_DoInit+0xa4>)
 8002072:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2210      	movs	r2, #16
 8002078:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3307      	adds	r3, #7
 8002090:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <_DoInit+0xa8>)
 8002092:	6810      	ldr	r0, [r2, #0]
 8002094:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002096:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <_DoInit+0xac>)
 800209e:	6810      	ldr	r0, [r2, #0]
 80020a0:	6018      	str	r0, [r3, #0]
 80020a2:	8891      	ldrh	r1, [r2, #4]
 80020a4:	7992      	ldrb	r2, [r2, #6]
 80020a6:	8099      	strh	r1, [r3, #4]
 80020a8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80020aa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2220      	movs	r2, #32
 80020b2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80020b4:	f3bf 8f5f 	dmb	sy
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	20012e10 	.word	0x20012e10
 80020c8:	08005e70 	.word	0x08005e70
 80020cc:	20012eb8 	.word	0x20012eb8
 80020d0:	200132b8 	.word	0x200132b8
 80020d4:	08005e7c 	.word	0x08005e7c
 80020d8:	08005e80 	.word	0x08005e80

080020dc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80020e8:	2300      	movs	r3, #0
 80020ea:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d905      	bls.n	800210c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	e007      	b.n	800211c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	69b9      	ldr	r1, [r7, #24]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	1acb      	subs	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3b01      	subs	r3, #1
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002126:	4293      	cmp	r3, r2
 8002128:	bf28      	it	cs
 800212a:	4613      	movcs	r3, r2
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4293      	cmp	r3, r2
 8002134:	bf28      	it	cs
 8002136:	4613      	movcs	r3, r2
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	4413      	add	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8002144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002146:	68b9      	ldr	r1, [r7, #8]
 8002148:	6978      	ldr	r0, [r7, #20]
 800214a:	f003 fe15 	bl	8005d78 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800214e:	6a3a      	ldr	r2, [r7, #32]
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	4413      	add	r3, r2
 8002154:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	4413      	add	r3, r2
 800215c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	4413      	add	r3, r2
 800216c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	429a      	cmp	r2, r3
 8002176:	d101      	bne.n	800217c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800217c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1b2      	bne.n	80020f2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800218c:	6a3b      	ldr	r3, [r7, #32]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3728      	adds	r7, #40	; 0x28
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8002196:	b580      	push	{r7, lr}
 8002198:	b088      	sub	sp, #32
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d911      	bls.n	80021de <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	4413      	add	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	6938      	ldr	r0, [r7, #16]
 80021ca:	f003 fdd5 	bl	8005d78 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80021ce:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	441a      	add	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80021dc:	e01f      	b.n	800221e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	4413      	add	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	68b9      	ldr	r1, [r7, #8]
 80021f0:	6938      	ldr	r0, [r7, #16]
 80021f2:	f003 fdc1 	bl	8005d78 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4413      	add	r3, r2
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4619      	mov	r1, r3
 800220e:	6938      	ldr	r0, [r7, #16]
 8002210:	f003 fdb2 	bl	8005d78 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002214:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	60da      	str	r2, [r3, #12]
}
 800221e:	bf00      	nop
 8002220:	3720      	adds	r7, #32
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002226:	b480      	push	{r7}
 8002228:	b087      	sub	sp, #28
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	429a      	cmp	r2, r3
 8002240:	d808      	bhi.n	8002254 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad2      	subs	r2, r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	3b01      	subs	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e004      	b.n	800225e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800225e:	697b      	ldr	r3, [r7, #20]
}
 8002260:	4618      	mov	r0, r3
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	; 0x30
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8002278:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800227a:	623b      	str	r3, [r7, #32]
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8002286:	f7ff fed1 	bl	800202c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	4613      	mov	r3, r2
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4a37      	ldr	r2, [pc, #220]	; (8002374 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002298:	4413      	add	r3, r2
 800229a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80022b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d92b      	bls.n	8002310 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4293      	cmp	r3, r2
 80022c8:	bf28      	it	cs
 80022ca:	4613      	movcs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	4413      	add	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	6939      	ldr	r1, [r7, #16]
 80022dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022de:	f003 fd4b 	bl	8005d78 <memcpy>
    NumBytesRead += NumBytesRem;
 80022e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	4413      	add	r3, r2
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80022ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	4413      	add	r3, r2
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80022fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	4413      	add	r3, r2
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002308:	429a      	cmp	r2, r3
 800230a:	d101      	bne.n	8002310 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800230c:	2300      	movs	r3, #0
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4293      	cmp	r3, r2
 800231e:	bf28      	it	cs
 8002320:	4613      	movcs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d019      	beq.n	800235e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002330:	4413      	add	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	6939      	ldr	r1, [r7, #16]
 8002338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800233a:	f003 fd1d 	bl	8005d78 <memcpy>
    NumBytesRead += NumBytesRem;
 800233e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	4413      	add	r3, r2
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	4413      	add	r3, r2
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	4413      	add	r3, r2
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002368:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800236c:	4618      	mov	r0, r3
 800236e:	3730      	adds	r7, #48	; 0x30
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20012e10 	.word	0x20012e10

08002378 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b08c      	sub	sp, #48	; 0x30
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002384:	4b3e      	ldr	r3, [pc, #248]	; (8002480 <SEGGER_RTT_ReadNoLock+0x108>)
 8002386:	623b      	str	r3, [r7, #32]
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <SEGGER_RTT_ReadNoLock+0x1e>
 8002392:	f7ff fe4b 	bl	800202c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	3360      	adds	r3, #96	; 0x60
 80023a2:	4a37      	ldr	r2, [pc, #220]	; (8002480 <SEGGER_RTT_ReadNoLock+0x108>)
 80023a4:	4413      	add	r3, r2
 80023a6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80023bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d92b      	bls.n	800241c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4293      	cmp	r3, r2
 80023d4:	bf28      	it	cs
 80023d6:	4613      	movcs	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	4413      	add	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	6939      	ldr	r1, [r7, #16]
 80023e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023ea:	f003 fcc5 	bl	8005d78 <memcpy>
    NumBytesRead += NumBytesRem;
 80023ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	4413      	add	r3, r2
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80023f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	4413      	add	r3, r2
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	4413      	add	r3, r2
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002414:	429a      	cmp	r2, r3
 8002416:	d101      	bne.n	800241c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002418:	2300      	movs	r3, #0
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4293      	cmp	r3, r2
 800242a:	bf28      	it	cs
 800242c:	4613      	movcs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d019      	beq.n	800246a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243c:	4413      	add	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	6939      	ldr	r1, [r7, #16]
 8002444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002446:	f003 fc97 	bl	8005d78 <memcpy>
    NumBytesRead += NumBytesRem;
 800244a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	4413      	add	r3, r2
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	4413      	add	r3, r2
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	4413      	add	r3, r2
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002474:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002478:	4618      	mov	r0, r3
 800247a:	3730      	adds	r7, #48	; 0x30
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20012e10 	.word	0x20012e10

08002484 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	3360      	adds	r3, #96	; 0x60
 80024a0:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80024a2:	4413      	add	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d029      	beq.n	8002502 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d82e      	bhi.n	8002510 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d013      	beq.n	80024e2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80024ba:	e029      	b.n	8002510 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80024bc:	6978      	ldr	r0, [r7, #20]
 80024be:	f7ff feb2 	bl	8002226 <_GetAvailWriteSpace>
 80024c2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d202      	bcs.n	80024d2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80024d0:	e021      	b.n	8002516 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	69b9      	ldr	r1, [r7, #24]
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff fe5b 	bl	8002196 <_WriteNoCheck>
    break;
 80024e0:	e019      	b.n	8002516 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff fe9f 	bl	8002226 <_GetAvailWriteSpace>
 80024e8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4293      	cmp	r3, r2
 80024f0:	bf28      	it	cs
 80024f2:	4613      	movcs	r3, r2
 80024f4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	69b9      	ldr	r1, [r7, #24]
 80024fa:	6978      	ldr	r0, [r7, #20]
 80024fc:	f7ff fe4b 	bl	8002196 <_WriteNoCheck>
    break;
 8002500:	e009      	b.n	8002516 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	69b9      	ldr	r1, [r7, #24]
 8002506:	6978      	ldr	r0, [r7, #20]
 8002508:	f7ff fde8 	bl	80020dc <_WriteBlocking>
 800250c:	61f8      	str	r0, [r7, #28]
    break;
 800250e:	e002      	b.n	8002516 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
    break;
 8002514:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002516:	69fb      	ldr	r3, [r7, #28]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20012e10 	.word	0x20012e10

08002524 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8002530:	4b0e      	ldr	r3, [pc, #56]	; (800256c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800253e:	f7ff fd75 	bl	800202c <_DoInit>
  SEGGER_RTT_LOCK();
 8002542:	f3ef 8311 	mrs	r3, BASEPRI
 8002546:	f04f 0120 	mov.w	r1, #32
 800254a:	f381 8811 	msr	BASEPRI, r1
 800254e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f7ff ff95 	bl	8002484 <SEGGER_RTT_WriteDownBufferNoLock>
 800255a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8002562:	697b      	ldr	r3, [r7, #20]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20012e10 	.word	0x20012e10

08002570 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800257e:	4b3d      	ldr	r3, [pc, #244]	; (8002674 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <SEGGER_RTT_AllocUpBuffer+0x20>
 800258c:	f7ff fd4e 	bl	800202c <_DoInit>
  SEGGER_RTT_LOCK();
 8002590:	f3ef 8311 	mrs	r3, BASEPRI
 8002594:	f04f 0120 	mov.w	r1, #32
 8002598:	f381 8811 	msr	BASEPRI, r1
 800259c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800259e:	4b35      	ldr	r3, [pc, #212]	; (8002674 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80025a0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80025a6:	6939      	ldr	r1, [r7, #16]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	440b      	add	r3, r1
 80025b6:	3304      	adds	r3, #4
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3301      	adds	r3, #1
 80025c2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	dbeb      	blt.n	80025a6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80025ce:	e000      	b.n	80025d2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80025d0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	429a      	cmp	r2, r3
 80025da:	da3f      	bge.n	800265c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80025dc:	6939      	ldr	r1, [r7, #16]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80025f0:	6939      	ldr	r1, [r7, #16]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	4613      	mov	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	3304      	adds	r3, #4
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002606:	6939      	ldr	r1, [r7, #16]
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	3320      	adds	r3, #32
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800261a:	6939      	ldr	r1, [r7, #16]
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	3328      	adds	r3, #40	; 0x28
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800262e:	6939      	ldr	r1, [r7, #16]
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	4613      	mov	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	3324      	adds	r3, #36	; 0x24
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8002642:	6939      	ldr	r1, [r7, #16]
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	332c      	adds	r3, #44	; 0x2c
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002656:	f3bf 8f5f 	dmb	sy
 800265a:	e002      	b.n	8002662 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002660:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8002668:	69fb      	ldr	r3, [r7, #28]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20012e10 	.word	0x20012e10

08002678 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002686:	4b33      	ldr	r3, [pc, #204]	; (8002754 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002694:	f7ff fcca 	bl	800202c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002698:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800269a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	461a      	mov	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d24d      	bcs.n	8002744 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80026a8:	f3ef 8311 	mrs	r3, BASEPRI
 80026ac:	f04f 0120 	mov.w	r1, #32
 80026b0:	f381 8811 	msr	BASEPRI, r1
 80026b4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d031      	beq.n	8002720 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80026bc:	6979      	ldr	r1, [r7, #20]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	3360      	adds	r3, #96	; 0x60
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80026d0:	6979      	ldr	r1, [r7, #20]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	3364      	adds	r3, #100	; 0x64
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80026e4:	6979      	ldr	r1, [r7, #20]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	440b      	add	r3, r1
 80026f2:	3368      	adds	r3, #104	; 0x68
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80026f8:	6979      	ldr	r1, [r7, #20]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	440b      	add	r3, r1
 8002706:	3370      	adds	r3, #112	; 0x70
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800270c:	6979      	ldr	r1, [r7, #20]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	440b      	add	r3, r1
 800271a:	336c      	adds	r3, #108	; 0x6c
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8002720:	6979      	ldr	r1, [r7, #20]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	440b      	add	r3, r1
 800272e:	3374      	adds	r3, #116	; 0x74
 8002730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002732:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002734:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	e002      	b.n	800274a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8002744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002748:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800274a:	69fb      	ldr	r3, [r7, #28]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20012e10 	.word	0x20012e10

08002758 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002768:	e002      	b.n	8002770 <_EncodeStr+0x18>
    Len++;
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	3301      	adds	r3, #1
 800276e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4413      	add	r3, r2
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f6      	bne.n	800276a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d901      	bls.n	8002788 <_EncodeStr+0x30>
    Len = Limit;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2bfe      	cmp	r3, #254	; 0xfe
 800278c:	d806      	bhi.n	800279c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	60fa      	str	r2, [r7, #12]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e011      	b.n	80027c0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	60fa      	str	r2, [r7, #12]
 80027a2:	22ff      	movs	r2, #255	; 0xff
 80027a4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	60fa      	str	r2, [r7, #12]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	0a19      	lsrs	r1, r3, #8
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	60fa      	str	r2, [r7, #12]
 80027bc:	b2ca      	uxtb	r2, r1
 80027be:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80027c4:	e00a      	b.n	80027dc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	1c53      	adds	r3, r2, #1
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1c59      	adds	r1, r3, #1
 80027d0:	60f9      	str	r1, [r7, #12]
 80027d2:	7812      	ldrb	r2, [r2, #0]
 80027d4:	701a      	strb	r2, [r3, #0]
    n++;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	3301      	adds	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d3f0      	bcc.n	80027c6 <_EncodeStr+0x6e>
  }
  return pPayload;
 80027e4:	68fb      	ldr	r3, [r7, #12]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3304      	adds	r3, #4
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002812:	4b36      	ldr	r3, [pc, #216]	; (80028ec <_HandleIncomingPacket+0xe0>)
 8002814:	7e1b      	ldrb	r3, [r3, #24]
 8002816:	4618      	mov	r0, r3
 8002818:	1cfb      	adds	r3, r7, #3
 800281a:	2201      	movs	r2, #1
 800281c:	4619      	mov	r1, r3
 800281e:	f7ff fdab 	bl	8002378 <SEGGER_RTT_ReadNoLock>
 8002822:	4603      	mov	r3, r0
 8002824:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	dd54      	ble.n	80028d6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	2b80      	cmp	r3, #128	; 0x80
 8002830:	d032      	beq.n	8002898 <_HandleIncomingPacket+0x8c>
 8002832:	2b80      	cmp	r3, #128	; 0x80
 8002834:	dc42      	bgt.n	80028bc <_HandleIncomingPacket+0xb0>
 8002836:	2b07      	cmp	r3, #7
 8002838:	dc16      	bgt.n	8002868 <_HandleIncomingPacket+0x5c>
 800283a:	2b00      	cmp	r3, #0
 800283c:	dd3e      	ble.n	80028bc <_HandleIncomingPacket+0xb0>
 800283e:	3b01      	subs	r3, #1
 8002840:	2b06      	cmp	r3, #6
 8002842:	d83b      	bhi.n	80028bc <_HandleIncomingPacket+0xb0>
 8002844:	a201      	add	r2, pc, #4	; (adr r2, 800284c <_HandleIncomingPacket+0x40>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	0800286f 	.word	0x0800286f
 8002850:	08002875 	.word	0x08002875
 8002854:	0800287b 	.word	0x0800287b
 8002858:	08002881 	.word	0x08002881
 800285c:	08002887 	.word	0x08002887
 8002860:	0800288d 	.word	0x0800288d
 8002864:	08002893 	.word	0x08002893
 8002868:	2b7f      	cmp	r3, #127	; 0x7f
 800286a:	d036      	beq.n	80028da <_HandleIncomingPacket+0xce>
 800286c:	e026      	b.n	80028bc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800286e:	f000 fe3d 	bl	80034ec <SEGGER_SYSVIEW_Start>
      break;
 8002872:	e037      	b.n	80028e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002874:	f000 fef6 	bl	8003664 <SEGGER_SYSVIEW_Stop>
      break;
 8002878:	e034      	b.n	80028e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800287a:	f001 f8cf 	bl	8003a1c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800287e:	e031      	b.n	80028e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002880:	f001 f894 	bl	80039ac <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002884:	e02e      	b.n	80028e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002886:	f000 ff13 	bl	80036b0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800288a:	e02b      	b.n	80028e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800288c:	f001 fb52 	bl	8003f34 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002890:	e028      	b.n	80028e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002892:	f001 fb31 	bl	8003ef8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002896:	e025      	b.n	80028e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <_HandleIncomingPacket+0xe0>)
 800289a:	7e1b      	ldrb	r3, [r3, #24]
 800289c:	4618      	mov	r0, r3
 800289e:	1cfb      	adds	r3, r7, #3
 80028a0:	2201      	movs	r2, #1
 80028a2:	4619      	mov	r1, r3
 80028a4:	f7ff fd68 	bl	8002378 <SEGGER_RTT_ReadNoLock>
 80028a8:	4603      	mov	r3, r0
 80028aa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	dd15      	ble.n	80028de <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 fa9f 	bl	8003df8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80028ba:	e010      	b.n	80028de <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	da0e      	bge.n	80028e2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <_HandleIncomingPacket+0xe0>)
 80028c6:	7e1b      	ldrb	r3, [r3, #24]
 80028c8:	4618      	mov	r0, r3
 80028ca:	1cfb      	adds	r3, r7, #3
 80028cc:	2201      	movs	r2, #1
 80028ce:	4619      	mov	r1, r3
 80028d0:	f7ff fd52 	bl	8002378 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80028d4:	e005      	b.n	80028e2 <_HandleIncomingPacket+0xd6>
    }
  }
 80028d6:	bf00      	nop
 80028d8:	e004      	b.n	80028e4 <_HandleIncomingPacket+0xd8>
      break;
 80028da:	bf00      	nop
 80028dc:	e002      	b.n	80028e4 <_HandleIncomingPacket+0xd8>
      break;
 80028de:	bf00      	nop
 80028e0:	e000      	b.n	80028e4 <_HandleIncomingPacket+0xd8>
      break;
 80028e2:	bf00      	nop
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	200142d0 	.word	0x200142d0

080028f0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08c      	sub	sp, #48	; 0x30
 80028f4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80028f6:	2301      	movs	r3, #1
 80028f8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	3301      	adds	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002904:	4b32      	ldr	r3, [pc, #200]	; (80029d0 <_TrySendOverflowPacket+0xe0>)
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
 800290a:	e00b      	b.n	8002924 <_TrySendOverflowPacket+0x34>
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	b2da      	uxtb	r2, r3
 8002910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002912:	1c59      	adds	r1, r3, #1
 8002914:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002916:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	09db      	lsrs	r3, r3, #7
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	2b7f      	cmp	r3, #127	; 0x7f
 8002928:	d8f0      	bhi.n	800290c <_TrySendOverflowPacket+0x1c>
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800293a:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <_TrySendOverflowPacket+0xe4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002940:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <_TrySendOverflowPacket+0xe0>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	623b      	str	r3, [r7, #32]
 8002952:	e00b      	b.n	800296c <_TrySendOverflowPacket+0x7c>
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	b2da      	uxtb	r2, r3
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	1c59      	adds	r1, r3, #1
 800295c:	6279      	str	r1, [r7, #36]	; 0x24
 800295e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	09db      	lsrs	r3, r3, #7
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	2b7f      	cmp	r3, #127	; 0x7f
 8002970:	d8f0      	bhi.n	8002954 <_TrySendOverflowPacket+0x64>
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	627a      	str	r2, [r7, #36]	; 0x24
 8002978:	6a3a      	ldr	r2, [r7, #32]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002982:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <_TrySendOverflowPacket+0xe0>)
 8002984:	785b      	ldrb	r3, [r3, #1]
 8002986:	4618      	mov	r0, r3
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	461a      	mov	r2, r3
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	4619      	mov	r1, r3
 8002994:	f7fd fc1c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002998:	4603      	mov	r3, r0
 800299a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800299c:	f7ff fabc 	bl	8001f18 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <_TrySendOverflowPacket+0xe0>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <_TrySendOverflowPacket+0xe0>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <_TrySendOverflowPacket+0xe0>)
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e004      	b.n	80029c4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <_TrySendOverflowPacket+0xe0>)
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	3301      	adds	r3, #1
 80029c0:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <_TrySendOverflowPacket+0xe0>)
 80029c2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80029c4:	693b      	ldr	r3, [r7, #16]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3730      	adds	r7, #48	; 0x30
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200142d0 	.word	0x200142d0
 80029d4:	e0001004 	.word	0xe0001004

080029d8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80029e4:	4b6d      	ldr	r3, [pc, #436]	; (8002b9c <_SendPacket+0x1c4>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d010      	beq.n	8002a0e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80029ec:	4b6b      	ldr	r3, [pc, #428]	; (8002b9c <_SendPacket+0x1c4>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80a5 	beq.w	8002b40 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80029f6:	4b69      	ldr	r3, [pc, #420]	; (8002b9c <_SendPacket+0x1c4>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d109      	bne.n	8002a12 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80029fe:	f7ff ff77 	bl	80028f0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002a02:	4b66      	ldr	r3, [pc, #408]	; (8002b9c <_SendPacket+0x1c4>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	f040 809c 	bne.w	8002b44 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8002a0c:	e001      	b.n	8002a12 <_SendPacket+0x3a>
    goto Send;
 8002a0e:	bf00      	nop
 8002a10:	e000      	b.n	8002a14 <_SendPacket+0x3c>
Send:
 8002a12:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b1f      	cmp	r3, #31
 8002a18:	d809      	bhi.n	8002a2e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002a1a:	4b60      	ldr	r3, [pc, #384]	; (8002b9c <_SendPacket+0x1c4>)
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f040 808d 	bne.w	8002b48 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b17      	cmp	r3, #23
 8002a32:	d807      	bhi.n	8002a44 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e03d      	b.n	8002ac0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a50:	d912      	bls.n	8002a78 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	09da      	lsrs	r2, r3, #7
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	3a01      	subs	r2, #1
 8002a6a:	60fa      	str	r2, [r7, #12]
 8002a6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	e006      	b.n	8002a86 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b7f      	cmp	r3, #127	; 0x7f
 8002a8a:	d912      	bls.n	8002ab2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	09da      	lsrs	r2, r3, #7
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	3a01      	subs	r2, #1
 8002aa4:	60fa      	str	r2, [r7, #12]
 8002aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e006      	b.n	8002ac0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002ac0:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <_SendPacket+0x1c8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002ac6:	4b35      	ldr	r3, [pc, #212]	; (8002b9c <_SendPacket+0x1c4>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	e00b      	b.n	8002af2 <_SendPacket+0x11a>
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	1c59      	adds	r1, r3, #1
 8002ae2:	6279      	str	r1, [r7, #36]	; 0x24
 8002ae4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	09db      	lsrs	r3, r3, #7
 8002af0:	623b      	str	r3, [r7, #32]
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	2b7f      	cmp	r3, #127	; 0x7f
 8002af6:	d8f0      	bhi.n	8002ada <_SendPacket+0x102>
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	627a      	str	r2, [r7, #36]	; 0x24
 8002afe:	6a3a      	ldr	r2, [r7, #32]
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002b08:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <_SendPacket+0x1c4>)
 8002b0a:	785b      	ldrb	r3, [r3, #1]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	68f9      	ldr	r1, [r7, #12]
 8002b18:	f7fd fb5a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8002b20:	f7ff f9fa 	bl	8001f18 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002b2a:	4a1c      	ldr	r2, [pc, #112]	; (8002b9c <_SendPacket+0x1c4>)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	60d3      	str	r3, [r2, #12]
 8002b30:	e00b      	b.n	8002b4a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002b32:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <_SendPacket+0x1c4>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	3301      	adds	r3, #1
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <_SendPacket+0x1c4>)
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	e004      	b.n	8002b4a <_SendPacket+0x172>
    goto SendDone;
 8002b40:	bf00      	nop
 8002b42:	e002      	b.n	8002b4a <_SendPacket+0x172>
      goto SendDone;
 8002b44:	bf00      	nop
 8002b46:	e000      	b.n	8002b4a <_SendPacket+0x172>
      goto SendDone;
 8002b48:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <_SendPacket+0x1c4>)
 8002b4c:	7e1b      	ldrb	r3, [r3, #24]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <_SendPacket+0x1cc>)
 8002b52:	460b      	mov	r3, r1
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	440b      	add	r3, r1
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	336c      	adds	r3, #108	; 0x6c
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <_SendPacket+0x1c4>)
 8002b62:	7e1b      	ldrb	r3, [r3, #24]
 8002b64:	4618      	mov	r0, r3
 8002b66:	490f      	ldr	r1, [pc, #60]	; (8002ba4 <_SendPacket+0x1cc>)
 8002b68:	4603      	mov	r3, r0
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4403      	add	r3, r0
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	3370      	adds	r3, #112	; 0x70
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d00b      	beq.n	8002b92 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <_SendPacket+0x1c4>)
 8002b7c:	789b      	ldrb	r3, [r3, #2]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d107      	bne.n	8002b92 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <_SendPacket+0x1c4>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002b88:	f7ff fe40 	bl	800280c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <_SendPacket+0x1c4>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002b92:	bf00      	nop
 8002b94:	3728      	adds	r7, #40	; 0x28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200142d0 	.word	0x200142d0
 8002ba0:	e0001004 	.word	0xe0001004
 8002ba4:	20012e10 	.word	0x20012e10

08002ba8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	2b80      	cmp	r3, #128	; 0x80
 8002bc0:	d80a      	bhi.n	8002bd8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	1c59      	adds	r1, r3, #1
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6051      	str	r1, [r2, #4]
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d15a      	bne.n	8002c96 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	623b      	str	r3, [r7, #32]
 8002c00:	e00b      	b.n	8002c1a <_StoreChar+0x72>
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	1c59      	adds	r1, r3, #1
 8002c0a:	6279      	str	r1, [r7, #36]	; 0x24
 8002c0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	09db      	lsrs	r3, r3, #7
 8002c18:	623b      	str	r3, [r7, #32]
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c1e:	d8f0      	bhi.n	8002c02 <_StoreChar+0x5a>
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	627a      	str	r2, [r7, #36]	; 0x24
 8002c26:	6a3a      	ldr	r2, [r7, #32]
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	e00b      	b.n	8002c52 <_StoreChar+0xaa>
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	1c59      	adds	r1, r3, #1
 8002c42:	61f9      	str	r1, [r7, #28]
 8002c44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	09db      	lsrs	r3, r3, #7
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b7f      	cmp	r3, #127	; 0x7f
 8002c56:	d8f0      	bhi.n	8002c3a <_StoreChar+0x92>
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	61fa      	str	r2, [r7, #28]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	221a      	movs	r2, #26
 8002c6e:	6939      	ldr	r1, [r7, #16]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff feb1 	bl	80029d8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fdb9 	bl	80027f2 <_PreparePacket>
 8002c80:	4602      	mov	r2, r0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
  }
}
 8002c96:	bf00      	nop
 8002c98:	3728      	adds	r7, #40	; 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002cba:	e007      	b.n	8002ccc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8002cbc:	6a3a      	ldr	r2, [r7, #32]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	623b      	str	r3, [r7, #32]
    Width++;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002ccc:	6a3a      	ldr	r2, [r7, #32]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d2f3      	bcs.n	8002cbc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d901      	bls.n	8002ce0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d11f      	bne.n	8002d2a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01c      	beq.n	8002d2a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8002cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <_PrintUnsigned+0x66>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <_PrintUnsigned+0x66>
        c = '0';
 8002d00:	2330      	movs	r3, #48	; 0x30
 8002d02:	76fb      	strb	r3, [r7, #27]
 8002d04:	e001      	b.n	8002d0a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8002d06:	2320      	movs	r3, #32
 8002d08:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002d0a:	e007      	b.n	8002d1c <_PrintUnsigned+0x7c>
        FieldWidth--;
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8002d12:	7efb      	ldrb	r3, [r7, #27]
 8002d14:	4619      	mov	r1, r3
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f7ff ff46 	bl	8002ba8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <_PrintUnsigned+0x8a>
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d3f0      	bcc.n	8002d0c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d903      	bls.n	8002d38 <_PrintUnsigned+0x98>
      NumDigits--;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	e009      	b.n	8002d4c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d200      	bcs.n	8002d4c <_PrintUnsigned+0xac>
        break;
 8002d4a:	e005      	b.n	8002d58 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002d56:	e7e8      	b.n	8002d2a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8002d70:	4a15      	ldr	r2, [pc, #84]	; (8002dc8 <_PrintUnsigned+0x128>)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	4413      	add	r3, r2
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f7ff ff14 	bl	8002ba8 <_StoreChar>
    Digit /= Base;
 8002d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1e3      	bne.n	8002d58 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8002d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d011      	beq.n	8002dbe <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00e      	beq.n	8002dbe <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002da0:	e006      	b.n	8002db0 <_PrintUnsigned+0x110>
        FieldWidth--;
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	3b01      	subs	r3, #1
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8002da8:	2120      	movs	r1, #32
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f7ff fefc 	bl	8002ba8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <_PrintUnsigned+0x11e>
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d3f1      	bcc.n	8002da2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	3728      	adds	r7, #40	; 0x28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	08005f14 	.word	0x08005f14

08002dcc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bfb8      	it	lt
 8002de0:	425b      	neglt	r3, r3
 8002de2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8002de4:	2301      	movs	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002de8:	e007      	b.n	8002dfa <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	fb92 f3f3 	sdiv	r3, r2, r3
 8002df2:	613b      	str	r3, [r7, #16]
    Width++;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	3301      	adds	r3, #1
 8002df8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	daf3      	bge.n	8002dea <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d901      	bls.n	8002e0e <_PrintInt+0x42>
    Width = NumDigits;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <_PrintInt+0x5e>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	db04      	blt.n	8002e24 <_PrintInt+0x58>
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <_PrintInt+0x5e>
    FieldWidth--;
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <_PrintInt+0x6e>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d016      	beq.n	8002e68 <_PrintInt+0x9c>
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d111      	bne.n	8002e68 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00e      	beq.n	8002e68 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002e4a:	e006      	b.n	8002e5a <_PrintInt+0x8e>
        FieldWidth--;
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8002e52:	2120      	movs	r1, #32
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7ff fea7 	bl	8002ba8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <_PrintInt+0x9c>
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d3f1      	bcc.n	8002e4c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	da07      	bge.n	8002e7e <_PrintInt+0xb2>
    v = -v;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	425b      	negs	r3, r3
 8002e72:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8002e74:	212d      	movs	r1, #45	; 0x2d
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff fe96 	bl	8002ba8 <_StoreChar>
 8002e7c:	e008      	b.n	8002e90 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8002e88:	212b      	movs	r1, #43	; 0x2b
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff fe8c 	bl	8002ba8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d019      	beq.n	8002ece <_PrintInt+0x102>
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d114      	bne.n	8002ece <_PrintInt+0x102>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d111      	bne.n	8002ece <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00e      	beq.n	8002ece <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002eb0:	e006      	b.n	8002ec0 <_PrintInt+0xf4>
        FieldWidth--;
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8002eb8:	2130      	movs	r1, #48	; 0x30
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7ff fe74 	bl	8002ba8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <_PrintInt+0x102>
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d3f1      	bcc.n	8002eb2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f7ff fedf 	bl	8002ca0 <_PrintUnsigned>
}
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b098      	sub	sp, #96	; 0x60
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8002efc:	f04f 0120 	mov.w	r1, #32
 8002f00:	f381 8811 	msr	BASEPRI, r1
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30
 8002f06:	48b7      	ldr	r0, [pc, #732]	; (80031e4 <_VPrintTarget+0x2f8>)
 8002f08:	f7ff fc73 	bl	80027f2 <_PreparePacket>
 8002f0c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8002f0e:	4bb5      	ldr	r3, [pc, #724]	; (80031e4 <_VPrintTarget+0x2f8>)
 8002f10:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8002f32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8183 	beq.w	8003242 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8002f3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f40:	2b25      	cmp	r3, #37	; 0x25
 8002f42:	f040 8170 	bne.w	8003226 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8002f46:	2300      	movs	r3, #0
 8002f48:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8002f56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f5a:	3b23      	subs	r3, #35	; 0x23
 8002f5c:	2b0d      	cmp	r3, #13
 8002f5e:	d83f      	bhi.n	8002fe0 <_VPrintTarget+0xf4>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <_VPrintTarget+0x7c>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002fd1 	.word	0x08002fd1
 8002f6c:	08002fe1 	.word	0x08002fe1
 8002f70:	08002fe1 	.word	0x08002fe1
 8002f74:	08002fe1 	.word	0x08002fe1
 8002f78:	08002fe1 	.word	0x08002fe1
 8002f7c:	08002fe1 	.word	0x08002fe1
 8002f80:	08002fe1 	.word	0x08002fe1
 8002f84:	08002fe1 	.word	0x08002fe1
 8002f88:	08002fc1 	.word	0x08002fc1
 8002f8c:	08002fe1 	.word	0x08002fe1
 8002f90:	08002fa1 	.word	0x08002fa1
 8002f94:	08002fe1 	.word	0x08002fe1
 8002f98:	08002fe1 	.word	0x08002fe1
 8002f9c:	08002fb1 	.word	0x08002fb1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8002fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3301      	adds	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	e01a      	b.n	8002fe6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8002fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb2:	f043 0302 	orr.w	r3, r3, #2
 8002fb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	e012      	b.n	8002fe6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8002fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e00a      	b.n	8002fe6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8002fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd2:	f043 0308 	orr.w	r3, r3, #8
 8002fd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	e002      	b.n	8002fe6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	653b      	str	r3, [r7, #80]	; 0x50
 8002fe4:	bf00      	nop
        }
      } while (v);
 8002fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1b0      	bne.n	8002f4e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8002fec:	2300      	movs	r3, #0
 8002fee:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8002ff8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ffc:	2b2f      	cmp	r3, #47	; 0x2f
 8002ffe:	d912      	bls.n	8003026 <_VPrintTarget+0x13a>
 8003000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003004:	2b39      	cmp	r3, #57	; 0x39
 8003006:	d80e      	bhi.n	8003026 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3301      	adds	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800300e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	461a      	mov	r2, r3
 800301a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800301e:	4413      	add	r3, r2
 8003020:	3b30      	subs	r3, #48	; 0x30
 8003022:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8003024:	e7e4      	b.n	8002ff0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8003026:	2300      	movs	r3, #0
 8003028:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8003032:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003036:	2b2e      	cmp	r3, #46	; 0x2e
 8003038:	d11d      	bne.n	8003076 <_VPrintTarget+0x18a>
        sFormat++;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3301      	adds	r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8003048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800304c:	2b2f      	cmp	r3, #47	; 0x2f
 800304e:	d912      	bls.n	8003076 <_VPrintTarget+0x18a>
 8003050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003054:	2b39      	cmp	r3, #57	; 0x39
 8003056:	d80e      	bhi.n	8003076 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3301      	adds	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800305e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	461a      	mov	r2, r3
 800306a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800306e:	4413      	add	r3, r2
 8003070:	3b30      	subs	r3, #48	; 0x30
 8003072:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8003074:	e7e4      	b.n	8003040 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800307e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003082:	2b6c      	cmp	r3, #108	; 0x6c
 8003084:	d003      	beq.n	800308e <_VPrintTarget+0x1a2>
 8003086:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800308a:	2b68      	cmp	r3, #104	; 0x68
 800308c:	d107      	bne.n	800309e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3301      	adds	r3, #1
 800309a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800309c:	e7ef      	b.n	800307e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800309e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80030a2:	2b25      	cmp	r3, #37	; 0x25
 80030a4:	f000 80b3 	beq.w	800320e <_VPrintTarget+0x322>
 80030a8:	2b25      	cmp	r3, #37	; 0x25
 80030aa:	f2c0 80b7 	blt.w	800321c <_VPrintTarget+0x330>
 80030ae:	2b78      	cmp	r3, #120	; 0x78
 80030b0:	f300 80b4 	bgt.w	800321c <_VPrintTarget+0x330>
 80030b4:	2b58      	cmp	r3, #88	; 0x58
 80030b6:	f2c0 80b1 	blt.w	800321c <_VPrintTarget+0x330>
 80030ba:	3b58      	subs	r3, #88	; 0x58
 80030bc:	2b20      	cmp	r3, #32
 80030be:	f200 80ad 	bhi.w	800321c <_VPrintTarget+0x330>
 80030c2:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <_VPrintTarget+0x1dc>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080031bf 	.word	0x080031bf
 80030cc:	0800321d 	.word	0x0800321d
 80030d0:	0800321d 	.word	0x0800321d
 80030d4:	0800321d 	.word	0x0800321d
 80030d8:	0800321d 	.word	0x0800321d
 80030dc:	0800321d 	.word	0x0800321d
 80030e0:	0800321d 	.word	0x0800321d
 80030e4:	0800321d 	.word	0x0800321d
 80030e8:	0800321d 	.word	0x0800321d
 80030ec:	0800321d 	.word	0x0800321d
 80030f0:	0800321d 	.word	0x0800321d
 80030f4:	0800314d 	.word	0x0800314d
 80030f8:	08003173 	.word	0x08003173
 80030fc:	0800321d 	.word	0x0800321d
 8003100:	0800321d 	.word	0x0800321d
 8003104:	0800321d 	.word	0x0800321d
 8003108:	0800321d 	.word	0x0800321d
 800310c:	0800321d 	.word	0x0800321d
 8003110:	0800321d 	.word	0x0800321d
 8003114:	0800321d 	.word	0x0800321d
 8003118:	0800321d 	.word	0x0800321d
 800311c:	0800321d 	.word	0x0800321d
 8003120:	0800321d 	.word	0x0800321d
 8003124:	0800321d 	.word	0x0800321d
 8003128:	080031e9 	.word	0x080031e9
 800312c:	0800321d 	.word	0x0800321d
 8003130:	0800321d 	.word	0x0800321d
 8003134:	0800321d 	.word	0x0800321d
 8003138:	0800321d 	.word	0x0800321d
 800313c:	08003199 	.word	0x08003199
 8003140:	0800321d 	.word	0x0800321d
 8003144:	0800321d 	.word	0x0800321d
 8003148:	080031bf 	.word	0x080031bf
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	1d19      	adds	r1, r3, #4
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6011      	str	r1, [r2, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800315a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800315c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8003160:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fd1c 	bl	8002ba8 <_StoreChar>
        break;
 8003170:	e055      	b.n	800321e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	1d19      	adds	r1, r3, #4
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6011      	str	r1, [r2, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003180:	f107 0014 	add.w	r0, r7, #20
 8003184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800318e:	220a      	movs	r2, #10
 8003190:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003192:	f7ff fe1b 	bl	8002dcc <_PrintInt>
        break;
 8003196:	e042      	b.n	800321e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	1d19      	adds	r1, r3, #4
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6011      	str	r1, [r2, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80031a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80031a8:	f107 0014 	add.w	r0, r7, #20
 80031ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ae:	9301      	str	r3, [sp, #4]
 80031b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b6:	220a      	movs	r2, #10
 80031b8:	f7ff fd72 	bl	8002ca0 <_PrintUnsigned>
        break;
 80031bc:	e02f      	b.n	800321e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	1d19      	adds	r1, r3, #4
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6011      	str	r1, [r2, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80031cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80031ce:	f107 0014 	add.w	r0, r7, #20
 80031d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031dc:	2210      	movs	r2, #16
 80031de:	f7ff fd5f 	bl	8002ca0 <_PrintUnsigned>
        break;
 80031e2:	e01c      	b.n	800321e <_VPrintTarget+0x332>
 80031e4:	20014300 	.word	0x20014300
      case 'p':
        v = va_arg(*pParamList, int);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	1d19      	adds	r1, r3, #4
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6011      	str	r1, [r2, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80031f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80031f8:	f107 0014 	add.w	r0, r7, #20
 80031fc:	2300      	movs	r3, #0
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	2308      	movs	r3, #8
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	2308      	movs	r3, #8
 8003206:	2210      	movs	r2, #16
 8003208:	f7ff fd4a 	bl	8002ca0 <_PrintUnsigned>
        break;
 800320c:	e007      	b.n	800321e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800320e:	f107 0314 	add.w	r3, r7, #20
 8003212:	2125      	movs	r1, #37	; 0x25
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fcc7 	bl	8002ba8 <_StoreChar>
        break;
 800321a:	e000      	b.n	800321e <_VPrintTarget+0x332>
      default:
        break;
 800321c:	bf00      	nop
      }
      sFormat++;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3301      	adds	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e007      	b.n	8003236 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8003226:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800322a:	f107 0314 	add.w	r3, r7, #20
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fcb9 	bl	8002ba8 <_StoreChar>
    }
  } while (*sFormat);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f47f ae72 	bne.w	8002f24 <_VPrintTarget+0x38>
 8003240:	e000      	b.n	8003244 <_VPrintTarget+0x358>
      break;
 8003242:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	2b00      	cmp	r3, #0
 8003248:	d041      	beq.n	80032ce <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800324a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	643b      	str	r3, [r7, #64]	; 0x40
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800325a:	e00b      	b.n	8003274 <_VPrintTarget+0x388>
 800325c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325e:	b2da      	uxtb	r2, r3
 8003260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003262:	1c59      	adds	r1, r3, #1
 8003264:	6439      	str	r1, [r7, #64]	; 0x40
 8003266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003270:	09db      	lsrs	r3, r3, #7
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003276:	2b7f      	cmp	r3, #127	; 0x7f
 8003278:	d8f0      	bhi.n	800325c <_VPrintTarget+0x370>
 800327a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	643a      	str	r2, [r7, #64]	; 0x40
 8003280:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003288:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	63bb      	str	r3, [r7, #56]	; 0x38
 800328e:	2300      	movs	r3, #0
 8003290:	637b      	str	r3, [r7, #52]	; 0x34
 8003292:	e00b      	b.n	80032ac <_VPrintTarget+0x3c0>
 8003294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003296:	b2da      	uxtb	r2, r3
 8003298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329a:	1c59      	adds	r1, r3, #1
 800329c:	63b9      	str	r1, [r7, #56]	; 0x38
 800329e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a8:	09db      	lsrs	r3, r3, #7
 80032aa:	637b      	str	r3, [r7, #52]	; 0x34
 80032ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ae:	2b7f      	cmp	r3, #127	; 0x7f
 80032b0:	d8f0      	bhi.n	8003294 <_VPrintTarget+0x3a8>
 80032b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80032b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	221a      	movs	r2, #26
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fb85 	bl	80029d8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80032d4:	bf00      	nop
 80032d6:	3758      	adds	r7, #88	; 0x58
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80032ea:	2300      	movs	r3, #0
 80032ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032f0:	4917      	ldr	r1, [pc, #92]	; (8003350 <SEGGER_SYSVIEW_Init+0x74>)
 80032f2:	4818      	ldr	r0, [pc, #96]	; (8003354 <SEGGER_SYSVIEW_Init+0x78>)
 80032f4:	f7ff f93c 	bl	8002570 <SEGGER_RTT_AllocUpBuffer>
 80032f8:	4603      	mov	r3, r0
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	4b16      	ldr	r3, [pc, #88]	; (8003358 <SEGGER_SYSVIEW_Init+0x7c>)
 80032fe:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <SEGGER_SYSVIEW_Init+0x7c>)
 8003302:	785a      	ldrb	r2, [r3, #1]
 8003304:	4b14      	ldr	r3, [pc, #80]	; (8003358 <SEGGER_SYSVIEW_Init+0x7c>)
 8003306:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <SEGGER_SYSVIEW_Init+0x7c>)
 800330a:	7e1b      	ldrb	r3, [r3, #24]
 800330c:	4618      	mov	r0, r3
 800330e:	2300      	movs	r3, #0
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	2308      	movs	r3, #8
 8003314:	4a11      	ldr	r2, [pc, #68]	; (800335c <SEGGER_SYSVIEW_Init+0x80>)
 8003316:	490f      	ldr	r1, [pc, #60]	; (8003354 <SEGGER_SYSVIEW_Init+0x78>)
 8003318:	f7ff f9ae 	bl	8002678 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800331c:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <SEGGER_SYSVIEW_Init+0x7c>)
 800331e:	2200      	movs	r2, #0
 8003320:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <SEGGER_SYSVIEW_Init+0x84>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a0c      	ldr	r2, [pc, #48]	; (8003358 <SEGGER_SYSVIEW_Init+0x7c>)
 8003328:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800332a:	4a0b      	ldr	r2, [pc, #44]	; (8003358 <SEGGER_SYSVIEW_Init+0x7c>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003330:	4a09      	ldr	r2, [pc, #36]	; (8003358 <SEGGER_SYSVIEW_Init+0x7c>)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003336:	4a08      	ldr	r2, [pc, #32]	; (8003358 <SEGGER_SYSVIEW_Init+0x7c>)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800333c:	4a06      	ldr	r2, [pc, #24]	; (8003358 <SEGGER_SYSVIEW_Init+0x7c>)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <SEGGER_SYSVIEW_Init+0x7c>)
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	200132c8 	.word	0x200132c8
 8003354:	08005e88 	.word	0x08005e88
 8003358:	200142d0 	.word	0x200142d0
 800335c:	200142c8 	.word	0x200142c8
 8003360:	e0001004 	.word	0xe0001004

08003364 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6113      	str	r3, [r2, #16]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	200142d0 	.word	0x200142d0

08003384 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800338c:	f3ef 8311 	mrs	r3, BASEPRI
 8003390:	f04f 0120 	mov.w	r1, #32
 8003394:	f381 8811 	msr	BASEPRI, r1
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	4808      	ldr	r0, [pc, #32]	; (80033bc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800339c:	f7ff fa29 	bl	80027f2 <_PreparePacket>
 80033a0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	68b8      	ldr	r0, [r7, #8]
 80033a8:	f7ff fb16 	bl	80029d8 <_SendPacket>
  RECORD_END();
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f383 8811 	msr	BASEPRI, r3
}
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20014300 	.word	0x20014300

080033c0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80033ca:	f3ef 8311 	mrs	r3, BASEPRI
 80033ce:	f04f 0120 	mov.w	r1, #32
 80033d2:	f381 8811 	msr	BASEPRI, r1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	4816      	ldr	r0, [pc, #88]	; (8003434 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80033da:	f7ff fa0a 	bl	80027f2 <_PreparePacket>
 80033de:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	61bb      	str	r3, [r7, #24]
 80033ec:	e00b      	b.n	8003406 <SEGGER_SYSVIEW_RecordU32+0x46>
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	1c59      	adds	r1, r3, #1
 80033f6:	61f9      	str	r1, [r7, #28]
 80033f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	09db      	lsrs	r3, r3, #7
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b7f      	cmp	r3, #127	; 0x7f
 800340a:	d8f0      	bhi.n	80033ee <SEGGER_SYSVIEW_RecordU32+0x2e>
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	61fa      	str	r2, [r7, #28]
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68f9      	ldr	r1, [r7, #12]
 8003420:	6938      	ldr	r0, [r7, #16]
 8003422:	f7ff fad9 	bl	80029d8 <_SendPacket>
  RECORD_END();
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f383 8811 	msr	BASEPRI, r3
}
 800342c:	bf00      	nop
 800342e:	3720      	adds	r7, #32
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20014300 	.word	0x20014300

08003438 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b08c      	sub	sp, #48	; 0x30
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003444:	f3ef 8311 	mrs	r3, BASEPRI
 8003448:	f04f 0120 	mov.w	r1, #32
 800344c:	f381 8811 	msr	BASEPRI, r1
 8003450:	61fb      	str	r3, [r7, #28]
 8003452:	4825      	ldr	r0, [pc, #148]	; (80034e8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003454:	f7ff f9cd 	bl	80027f2 <_PreparePacket>
 8003458:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
 8003466:	e00b      	b.n	8003480 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346a:	b2da      	uxtb	r2, r3
 800346c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346e:	1c59      	adds	r1, r3, #1
 8003470:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	09db      	lsrs	r3, r3, #7
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	2b7f      	cmp	r3, #127	; 0x7f
 8003484:	d8f0      	bhi.n	8003468 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800348c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	623b      	str	r3, [r7, #32]
 800349e:	e00b      	b.n	80034b8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	1c59      	adds	r1, r3, #1
 80034a8:	6279      	str	r1, [r7, #36]	; 0x24
 80034aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	09db      	lsrs	r3, r3, #7
 80034b6:	623b      	str	r3, [r7, #32]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	2b7f      	cmp	r3, #127	; 0x7f
 80034bc:	d8f0      	bhi.n	80034a0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	627a      	str	r2, [r7, #36]	; 0x24
 80034c4:	6a3a      	ldr	r2, [r7, #32]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	6979      	ldr	r1, [r7, #20]
 80034d2:	69b8      	ldr	r0, [r7, #24]
 80034d4:	f7ff fa80 	bl	80029d8 <_SendPacket>
  RECORD_END();
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f383 8811 	msr	BASEPRI, r3
}
 80034de:	bf00      	nop
 80034e0:	3730      	adds	r7, #48	; 0x30
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20014300 	.word	0x20014300

080034ec <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08c      	sub	sp, #48	; 0x30
 80034f0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80034f2:	4b59      	ldr	r3, [pc, #356]	; (8003658 <SEGGER_SYSVIEW_Start+0x16c>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80034f8:	f3ef 8311 	mrs	r3, BASEPRI
 80034fc:	f04f 0120 	mov.w	r1, #32
 8003500:	f381 8811 	msr	BASEPRI, r1
 8003504:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003506:	4b54      	ldr	r3, [pc, #336]	; (8003658 <SEGGER_SYSVIEW_Start+0x16c>)
 8003508:	785b      	ldrb	r3, [r3, #1]
 800350a:	220a      	movs	r2, #10
 800350c:	4953      	ldr	r1, [pc, #332]	; (800365c <SEGGER_SYSVIEW_Start+0x170>)
 800350e:	4618      	mov	r0, r3
 8003510:	f7fc fe5e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800351a:	f7fe fcfd 	bl	8001f18 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800351e:	200a      	movs	r0, #10
 8003520:	f7ff ff30 	bl	8003384 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003524:	f3ef 8311 	mrs	r3, BASEPRI
 8003528:	f04f 0120 	mov.w	r1, #32
 800352c:	f381 8811 	msr	BASEPRI, r1
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	484b      	ldr	r0, [pc, #300]	; (8003660 <SEGGER_SYSVIEW_Start+0x174>)
 8003534:	f7ff f95d 	bl	80027f2 <_PreparePacket>
 8003538:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003542:	4b45      	ldr	r3, [pc, #276]	; (8003658 <SEGGER_SYSVIEW_Start+0x16c>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
 8003548:	e00b      	b.n	8003562 <SEGGER_SYSVIEW_Start+0x76>
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	b2da      	uxtb	r2, r3
 800354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003550:	1c59      	adds	r1, r3, #1
 8003552:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003554:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	09db      	lsrs	r3, r3, #7
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	2b7f      	cmp	r3, #127	; 0x7f
 8003566:	d8f0      	bhi.n	800354a <SEGGER_SYSVIEW_Start+0x5e>
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800356e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003576:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
 800357c:	4b36      	ldr	r3, [pc, #216]	; (8003658 <SEGGER_SYSVIEW_Start+0x16c>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	623b      	str	r3, [r7, #32]
 8003582:	e00b      	b.n	800359c <SEGGER_SYSVIEW_Start+0xb0>
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	6279      	str	r1, [r7, #36]	; 0x24
 800358e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	09db      	lsrs	r3, r3, #7
 800359a:	623b      	str	r3, [r7, #32]
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	2b7f      	cmp	r3, #127	; 0x7f
 80035a0:	d8f0      	bhi.n	8003584 <SEGGER_SYSVIEW_Start+0x98>
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	627a      	str	r2, [r7, #36]	; 0x24
 80035a8:	6a3a      	ldr	r2, [r7, #32]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	4b28      	ldr	r3, [pc, #160]	; (8003658 <SEGGER_SYSVIEW_Start+0x16c>)
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	e00b      	b.n	80035d6 <SEGGER_SYSVIEW_Start+0xea>
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	1c59      	adds	r1, r3, #1
 80035c6:	61f9      	str	r1, [r7, #28]
 80035c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	09db      	lsrs	r3, r3, #7
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b7f      	cmp	r3, #127	; 0x7f
 80035da:	d8f0      	bhi.n	80035be <SEGGER_SYSVIEW_Start+0xd2>
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	61fa      	str	r2, [r7, #28]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	e00b      	b.n	800360e <SEGGER_SYSVIEW_Start+0x122>
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	1c59      	adds	r1, r3, #1
 80035fe:	6179      	str	r1, [r7, #20]
 8003600:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	09db      	lsrs	r3, r3, #7
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	2b7f      	cmp	r3, #127	; 0x7f
 8003612:	d8f0      	bhi.n	80035f6 <SEGGER_SYSVIEW_Start+0x10a>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	617a      	str	r2, [r7, #20]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003624:	2218      	movs	r2, #24
 8003626:	6839      	ldr	r1, [r7, #0]
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff f9d5 	bl	80029d8 <_SendPacket>
      RECORD_END();
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003634:	4b08      	ldr	r3, [pc, #32]	; (8003658 <SEGGER_SYSVIEW_Start+0x16c>)
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <SEGGER_SYSVIEW_Start+0x16c>)
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003642:	f000 f9eb 	bl	8003a1c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003646:	f000 f9b1 	bl	80039ac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800364a:	f000 fc73 	bl	8003f34 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800364e:	bf00      	nop
 8003650:	3730      	adds	r7, #48	; 0x30
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200142d0 	.word	0x200142d0
 800365c:	08005f08 	.word	0x08005f08
 8003660:	20014300 	.word	0x20014300

08003664 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800366a:	f3ef 8311 	mrs	r3, BASEPRI
 800366e:	f04f 0120 	mov.w	r1, #32
 8003672:	f381 8811 	msr	BASEPRI, r1
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	480b      	ldr	r0, [pc, #44]	; (80036a8 <SEGGER_SYSVIEW_Stop+0x44>)
 800367a:	f7ff f8ba 	bl	80027f2 <_PreparePacket>
 800367e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <SEGGER_SYSVIEW_Stop+0x48>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003688:	220b      	movs	r2, #11
 800368a:	6839      	ldr	r1, [r7, #0]
 800368c:	6838      	ldr	r0, [r7, #0]
 800368e:	f7ff f9a3 	bl	80029d8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <SEGGER_SYSVIEW_Stop+0x48>)
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f383 8811 	msr	BASEPRI, r3
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20014300 	.word	0x20014300
 80036ac:	200142d0 	.word	0x200142d0

080036b0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08c      	sub	sp, #48	; 0x30
 80036b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80036b6:	f3ef 8311 	mrs	r3, BASEPRI
 80036ba:	f04f 0120 	mov.w	r1, #32
 80036be:	f381 8811 	msr	BASEPRI, r1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	4845      	ldr	r0, [pc, #276]	; (80037dc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80036c6:	f7ff f894 	bl	80027f2 <_PreparePacket>
 80036ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d4:	4b42      	ldr	r3, [pc, #264]	; (80037e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036da:	e00b      	b.n	80036f4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	1c59      	adds	r1, r3, #1
 80036e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80036e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	09db      	lsrs	r3, r3, #7
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	2b7f      	cmp	r3, #127	; 0x7f
 80036f8:	d8f0      	bhi.n	80036dc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003708:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
 800370e:	4b34      	ldr	r3, [pc, #208]	; (80037e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	623b      	str	r3, [r7, #32]
 8003714:	e00b      	b.n	800372e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	1c59      	adds	r1, r3, #1
 800371e:	6279      	str	r1, [r7, #36]	; 0x24
 8003720:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	09db      	lsrs	r3, r3, #7
 800372c:	623b      	str	r3, [r7, #32]
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	2b7f      	cmp	r3, #127	; 0x7f
 8003732:	d8f0      	bhi.n	8003716 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	627a      	str	r2, [r7, #36]	; 0x24
 800373a:	6a3a      	ldr	r2, [r7, #32]
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	701a      	strb	r2, [r3, #0]
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	4b25      	ldr	r3, [pc, #148]	; (80037e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	e00b      	b.n	8003768 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	b2da      	uxtb	r2, r3
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	1c59      	adds	r1, r3, #1
 8003758:	61f9      	str	r1, [r7, #28]
 800375a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	09db      	lsrs	r3, r3, #7
 8003766:	61bb      	str	r3, [r7, #24]
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2b7f      	cmp	r3, #127	; 0x7f
 800376c:	d8f0      	bhi.n	8003750 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	61fa      	str	r2, [r7, #28]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	2300      	movs	r3, #0
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	e00b      	b.n	80037a0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	b2da      	uxtb	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	1c59      	adds	r1, r3, #1
 8003790:	6179      	str	r1, [r7, #20]
 8003792:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	09db      	lsrs	r3, r3, #7
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b7f      	cmp	r3, #127	; 0x7f
 80037a4:	d8f0      	bhi.n	8003788 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	617a      	str	r2, [r7, #20]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80037b6:	2218      	movs	r2, #24
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	68b8      	ldr	r0, [r7, #8]
 80037bc:	f7ff f90c 	bl	80029d8 <_SendPacket>
  RECORD_END();
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	4798      	blx	r3
  }
}
 80037d4:	bf00      	nop
 80037d6:	3730      	adds	r7, #48	; 0x30
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20014300 	.word	0x20014300
 80037e0:	200142d0 	.word	0x200142d0

080037e4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b092      	sub	sp, #72	; 0x48
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80037ec:	f3ef 8311 	mrs	r3, BASEPRI
 80037f0:	f04f 0120 	mov.w	r1, #32
 80037f4:	f381 8811 	msr	BASEPRI, r1
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	486a      	ldr	r0, [pc, #424]	; (80039a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80037fc:	f7fe fff9 	bl	80027f2 <_PreparePacket>
 8003800:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	647b      	str	r3, [r7, #68]	; 0x44
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	4b66      	ldr	r3, [pc, #408]	; (80039a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	643b      	str	r3, [r7, #64]	; 0x40
 8003816:	e00b      	b.n	8003830 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381a:	b2da      	uxtb	r2, r3
 800381c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800381e:	1c59      	adds	r1, r3, #1
 8003820:	6479      	str	r1, [r7, #68]	; 0x44
 8003822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800382c:	09db      	lsrs	r3, r3, #7
 800382e:	643b      	str	r3, [r7, #64]	; 0x40
 8003830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003832:	2b7f      	cmp	r3, #127	; 0x7f
 8003834:	d8f0      	bhi.n	8003818 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	647a      	str	r2, [r7, #68]	; 0x44
 800383c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003844:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003850:	e00b      	b.n	800386a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003854:	b2da      	uxtb	r2, r3
 8003856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003858:	1c59      	adds	r1, r3, #1
 800385a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800385c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003866:	09db      	lsrs	r3, r3, #7
 8003868:	63bb      	str	r3, [r7, #56]	; 0x38
 800386a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386c:	2b7f      	cmp	r3, #127	; 0x7f
 800386e:	d8f0      	bhi.n	8003852 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800387e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	4619      	mov	r1, r3
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7fe ff65 	bl	8002758 <_EncodeStr>
 800388e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003890:	2209      	movs	r2, #9
 8003892:	68f9      	ldr	r1, [r7, #12]
 8003894:	6938      	ldr	r0, [r7, #16]
 8003896:	f7ff f89f 	bl	80029d8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	637b      	str	r3, [r7, #52]	; 0x34
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4b40      	ldr	r3, [pc, #256]	; (80039a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	633b      	str	r3, [r7, #48]	; 0x30
 80038ae:	e00b      	b.n	80038c8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b6:	1c59      	adds	r1, r3, #1
 80038b8:	6379      	str	r1, [r7, #52]	; 0x34
 80038ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	09db      	lsrs	r3, r3, #7
 80038c6:	633b      	str	r3, [r7, #48]	; 0x30
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	2b7f      	cmp	r3, #127	; 0x7f
 80038cc:	d8f0      	bhi.n	80038b0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80038ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	637a      	str	r2, [r7, #52]	; 0x34
 80038d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e8:	e00b      	b.n	8003902 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	1c59      	adds	r1, r3, #1
 80038f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80038f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	09db      	lsrs	r3, r3, #7
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28
 8003902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003904:	2b7f      	cmp	r3, #127	; 0x7f
 8003906:	d8f0      	bhi.n	80038ea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800390e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003916:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	623b      	str	r3, [r7, #32]
 8003922:	e00b      	b.n	800393c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	1c59      	adds	r1, r3, #1
 800392c:	6279      	str	r1, [r7, #36]	; 0x24
 800392e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	09db      	lsrs	r3, r3, #7
 800393a:	623b      	str	r3, [r7, #32]
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	2b7f      	cmp	r3, #127	; 0x7f
 8003940:	d8f0      	bhi.n	8003924 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	627a      	str	r2, [r7, #36]	; 0x24
 8003948:	6a3a      	ldr	r2, [r7, #32]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	e00b      	b.n	8003974 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	b2da      	uxtb	r2, r3
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	1c59      	adds	r1, r3, #1
 8003964:	61f9      	str	r1, [r7, #28]
 8003966:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	09db      	lsrs	r3, r3, #7
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b7f      	cmp	r3, #127	; 0x7f
 8003978:	d8f0      	bhi.n	800395c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	61fa      	str	r2, [r7, #28]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800398a:	2215      	movs	r2, #21
 800398c:	68f9      	ldr	r1, [r7, #12]
 800398e:	6938      	ldr	r0, [r7, #16]
 8003990:	f7ff f822 	bl	80029d8 <_SendPacket>
  RECORD_END();
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f383 8811 	msr	BASEPRI, r3
}
 800399a:	bf00      	nop
 800399c:	3748      	adds	r7, #72	; 0x48
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20014300 	.word	0x20014300
 80039a8:	200142d0 	.word	0x200142d0

080039ac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80039b0:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80039c2:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4798      	blx	r3
  }
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200142d0 	.word	0x200142d0

080039d4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80039dc:	f3ef 8311 	mrs	r3, BASEPRI
 80039e0:	f04f 0120 	mov.w	r1, #32
 80039e4:	f381 8811 	msr	BASEPRI, r1
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	480b      	ldr	r0, [pc, #44]	; (8003a18 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80039ec:	f7fe ff01 	bl	80027f2 <_PreparePacket>
 80039f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80039f2:	2280      	movs	r2, #128	; 0x80
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	6938      	ldr	r0, [r7, #16]
 80039f8:	f7fe feae 	bl	8002758 <_EncodeStr>
 80039fc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80039fe:	220e      	movs	r2, #14
 8003a00:	68f9      	ldr	r1, [r7, #12]
 8003a02:	6938      	ldr	r0, [r7, #16]
 8003a04:	f7fe ffe8 	bl	80029d8 <_SendPacket>
  RECORD_END();
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f383 8811 	msr	BASEPRI, r3
}
 8003a0e:	bf00      	nop
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20014300 	.word	0x20014300

08003a1c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d01a      	beq.n	8003a60 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003a2a:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d015      	beq.n	8003a60 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4798      	blx	r3
 8003a3c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003a40:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003a42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	000a      	movs	r2, r1
 8003a50:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003a52:	4613      	mov	r3, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	4621      	mov	r1, r4
 8003a58:	200d      	movs	r0, #13
 8003a5a:	f7ff fced 	bl	8003438 <SEGGER_SYSVIEW_RecordU32x2>
 8003a5e:	e006      	b.n	8003a6e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4619      	mov	r1, r3
 8003a66:	200c      	movs	r0, #12
 8003a68:	f7ff fcaa 	bl	80033c0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd90      	pop	{r4, r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200142d0 	.word	0x200142d0
 8003a7c:	e0001004 	.word	0xe0001004

08003a80 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003a86:	f3ef 8311 	mrs	r3, BASEPRI
 8003a8a:	f04f 0120 	mov.w	r1, #32
 8003a8e:	f381 8811 	msr	BASEPRI, r1
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	4819      	ldr	r0, [pc, #100]	; (8003afc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003a96:	f7fe feac 	bl	80027f2 <_PreparePacket>
 8003a9a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003aa0:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	e00b      	b.n	8003acc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	1c59      	adds	r1, r3, #1
 8003abc:	6179      	str	r1, [r7, #20]
 8003abe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	09db      	lsrs	r3, r3, #7
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b7f      	cmp	r3, #127	; 0x7f
 8003ad0:	d8f0      	bhi.n	8003ab4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	617a      	str	r2, [r7, #20]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	68b8      	ldr	r0, [r7, #8]
 8003ae8:	f7fe ff76 	bl	80029d8 <_SendPacket>
  RECORD_END();
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f383 8811 	msr	BASEPRI, r3
}
 8003af2:	bf00      	nop
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20014300 	.word	0x20014300
 8003b00:	e000ed04 	.word	0xe000ed04

08003b04 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8003b0e:	f04f 0120 	mov.w	r1, #32
 8003b12:	f381 8811 	msr	BASEPRI, r1
 8003b16:	607b      	str	r3, [r7, #4]
 8003b18:	4807      	ldr	r0, [pc, #28]	; (8003b38 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003b1a:	f7fe fe6a 	bl	80027f2 <_PreparePacket>
 8003b1e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003b20:	2203      	movs	r2, #3
 8003b22:	6839      	ldr	r1, [r7, #0]
 8003b24:	6838      	ldr	r0, [r7, #0]
 8003b26:	f7fe ff57 	bl	80029d8 <_SendPacket>
  RECORD_END();
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f383 8811 	msr	BASEPRI, r3
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20014300 	.word	0x20014300

08003b3c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003b42:	f3ef 8311 	mrs	r3, BASEPRI
 8003b46:	f04f 0120 	mov.w	r1, #32
 8003b4a:	f381 8811 	msr	BASEPRI, r1
 8003b4e:	607b      	str	r3, [r7, #4]
 8003b50:	4807      	ldr	r0, [pc, #28]	; (8003b70 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003b52:	f7fe fe4e 	bl	80027f2 <_PreparePacket>
 8003b56:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003b58:	2212      	movs	r2, #18
 8003b5a:	6839      	ldr	r1, [r7, #0]
 8003b5c:	6838      	ldr	r0, [r7, #0]
 8003b5e:	f7fe ff3b 	bl	80029d8 <_SendPacket>
  RECORD_END();
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f383 8811 	msr	BASEPRI, r3
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20014300 	.word	0x20014300

08003b74 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003b7a:	f3ef 8311 	mrs	r3, BASEPRI
 8003b7e:	f04f 0120 	mov.w	r1, #32
 8003b82:	f381 8811 	msr	BASEPRI, r1
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	4807      	ldr	r0, [pc, #28]	; (8003ba8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003b8a:	f7fe fe32 	bl	80027f2 <_PreparePacket>
 8003b8e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003b90:	2211      	movs	r2, #17
 8003b92:	6839      	ldr	r1, [r7, #0]
 8003b94:	6838      	ldr	r0, [r7, #0]
 8003b96:	f7fe ff1f 	bl	80029d8 <_SendPacket>
  RECORD_END();
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f383 8811 	msr	BASEPRI, r3
}
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20014300 	.word	0x20014300

08003bac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003bb4:	f3ef 8311 	mrs	r3, BASEPRI
 8003bb8:	f04f 0120 	mov.w	r1, #32
 8003bbc:	f381 8811 	msr	BASEPRI, r1
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	4819      	ldr	r0, [pc, #100]	; (8003c28 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8003bc4:	f7fe fe15 	bl	80027f2 <_PreparePacket>
 8003bc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003bce:	4b17      	ldr	r3, [pc, #92]	; (8003c2c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	61bb      	str	r3, [r7, #24]
 8003be0:	e00b      	b.n	8003bfa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	1c59      	adds	r1, r3, #1
 8003bea:	61f9      	str	r1, [r7, #28]
 8003bec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	09db      	lsrs	r3, r3, #7
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b7f      	cmp	r3, #127	; 0x7f
 8003bfe:	d8f0      	bhi.n	8003be2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	61fa      	str	r2, [r7, #28]
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003c10:	2208      	movs	r2, #8
 8003c12:	68f9      	ldr	r1, [r7, #12]
 8003c14:	6938      	ldr	r0, [r7, #16]
 8003c16:	f7fe fedf 	bl	80029d8 <_SendPacket>
  RECORD_END();
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f383 8811 	msr	BASEPRI, r3
}
 8003c20:	bf00      	nop
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20014300 	.word	0x20014300
 8003c2c:	200142d0 	.word	0x200142d0

08003c30 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003c38:	f3ef 8311 	mrs	r3, BASEPRI
 8003c3c:	f04f 0120 	mov.w	r1, #32
 8003c40:	f381 8811 	msr	BASEPRI, r1
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	4819      	ldr	r0, [pc, #100]	; (8003cac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8003c48:	f7fe fdd3 	bl	80027f2 <_PreparePacket>
 8003c4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003c52:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	61fb      	str	r3, [r7, #28]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	e00b      	b.n	8003c7e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	1c59      	adds	r1, r3, #1
 8003c6e:	61f9      	str	r1, [r7, #28]
 8003c70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	701a      	strb	r2, [r3, #0]
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	09db      	lsrs	r3, r3, #7
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	2b7f      	cmp	r3, #127	; 0x7f
 8003c82:	d8f0      	bhi.n	8003c66 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	61fa      	str	r2, [r7, #28]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003c94:	2204      	movs	r2, #4
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	6938      	ldr	r0, [r7, #16]
 8003c9a:	f7fe fe9d 	bl	80029d8 <_SendPacket>
  RECORD_END();
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f383 8811 	msr	BASEPRI, r3
}
 8003ca4:	bf00      	nop
 8003ca6:	3720      	adds	r7, #32
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20014300 	.word	0x20014300
 8003cb0:	200142d0 	.word	0x200142d0

08003cb4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003cbc:	f3ef 8311 	mrs	r3, BASEPRI
 8003cc0:	f04f 0120 	mov.w	r1, #32
 8003cc4:	f381 8811 	msr	BASEPRI, r1
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	4819      	ldr	r0, [pc, #100]	; (8003d30 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8003ccc:	f7fe fd91 	bl	80027f2 <_PreparePacket>
 8003cd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003cd6:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	61fb      	str	r3, [r7, #28]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	e00b      	b.n	8003d02 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	1c59      	adds	r1, r3, #1
 8003cf2:	61f9      	str	r1, [r7, #28]
 8003cf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	09db      	lsrs	r3, r3, #7
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b7f      	cmp	r3, #127	; 0x7f
 8003d06:	d8f0      	bhi.n	8003cea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	61fa      	str	r2, [r7, #28]
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003d18:	2206      	movs	r2, #6
 8003d1a:	68f9      	ldr	r1, [r7, #12]
 8003d1c:	6938      	ldr	r0, [r7, #16]
 8003d1e:	f7fe fe5b 	bl	80029d8 <_SendPacket>
  RECORD_END();
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f383 8811 	msr	BASEPRI, r3
}
 8003d28:	bf00      	nop
 8003d2a:	3720      	adds	r7, #32
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20014300 	.word	0x20014300
 8003d34:	200142d0 	.word	0x200142d0

08003d38 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d42:	f3ef 8311 	mrs	r3, BASEPRI
 8003d46:	f04f 0120 	mov.w	r1, #32
 8003d4a:	f381 8811 	msr	BASEPRI, r1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	4827      	ldr	r0, [pc, #156]	; (8003df0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8003d52:	f7fe fd4e 	bl	80027f2 <_PreparePacket>
 8003d56:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003d5c:	4b25      	ldr	r3, [pc, #148]	; (8003df4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	623b      	str	r3, [r7, #32]
 8003d6e:	e00b      	b.n	8003d88 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	1c59      	adds	r1, r3, #1
 8003d78:	6279      	str	r1, [r7, #36]	; 0x24
 8003d7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	09db      	lsrs	r3, r3, #7
 8003d86:	623b      	str	r3, [r7, #32]
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8003d8c:	d8f0      	bhi.n	8003d70 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	627a      	str	r2, [r7, #36]	; 0x24
 8003d94:	6a3a      	ldr	r2, [r7, #32]
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	e00b      	b.n	8003dc0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	1c59      	adds	r1, r3, #1
 8003db0:	61f9      	str	r1, [r7, #28]
 8003db2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	09db      	lsrs	r3, r3, #7
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8003dc4:	d8f0      	bhi.n	8003da8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	61fa      	str	r2, [r7, #28]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8003dd6:	2207      	movs	r2, #7
 8003dd8:	68f9      	ldr	r1, [r7, #12]
 8003dda:	6938      	ldr	r0, [r7, #16]
 8003ddc:	f7fe fdfc 	bl	80029d8 <_SendPacket>
  RECORD_END();
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f383 8811 	msr	BASEPRI, r3
}
 8003de6:	bf00      	nop
 8003de8:	3728      	adds	r7, #40	; 0x28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20014300 	.word	0x20014300
 8003df4:	200142d0 	.word	0x200142d0

08003df8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08c      	sub	sp, #48	; 0x30
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003e02:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d06d      	beq.n	8003ee6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003e0a:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003e10:	2300      	movs	r3, #0
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e14:	e008      	b.n	8003e28 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	3301      	adds	r3, #1
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d3f2      	bcc.n	8003e16 <SEGGER_SYSVIEW_SendModule+0x1e>
 8003e30:	e000      	b.n	8003e34 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003e32:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d055      	beq.n	8003ee6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8003e3e:	f04f 0120 	mov.w	r1, #32
 8003e42:	f381 8811 	msr	BASEPRI, r1
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	482a      	ldr	r0, [pc, #168]	; (8003ef4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003e4a:	f7fe fcd2 	bl	80027f2 <_PreparePacket>
 8003e4e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	623b      	str	r3, [r7, #32]
 8003e5c:	e00b      	b.n	8003e76 <SEGGER_SYSVIEW_SendModule+0x7e>
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	1c59      	adds	r1, r3, #1
 8003e66:	6279      	str	r1, [r7, #36]	; 0x24
 8003e68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	09db      	lsrs	r3, r3, #7
 8003e74:	623b      	str	r3, [r7, #32]
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	2b7f      	cmp	r3, #127	; 0x7f
 8003e7a:	d8f0      	bhi.n	8003e5e <SEGGER_SYSVIEW_SendModule+0x66>
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	627a      	str	r2, [r7, #36]	; 0x24
 8003e82:	6a3a      	ldr	r2, [r7, #32]
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	e00b      	b.n	8003eb0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	1c59      	adds	r1, r3, #1
 8003ea0:	61f9      	str	r1, [r7, #28]
 8003ea2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	09db      	lsrs	r3, r3, #7
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8003eb4:	d8f0      	bhi.n	8003e98 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	61fa      	str	r2, [r7, #28]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2280      	movs	r2, #128	; 0x80
 8003ecc:	4619      	mov	r1, r3
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f7fe fc42 	bl	8002758 <_EncodeStr>
 8003ed4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003ed6:	2216      	movs	r2, #22
 8003ed8:	68f9      	ldr	r1, [r7, #12]
 8003eda:	6938      	ldr	r0, [r7, #16]
 8003edc:	f7fe fd7c 	bl	80029d8 <_SendPacket>
      RECORD_END();
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	3730      	adds	r7, #48	; 0x30
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	200142f8 	.word	0x200142f8
 8003ef4:	20014300 	.word	0x20014300

08003ef8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00f      	beq.n	8003f26 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003f06:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f2      	bne.n	8003f0c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	200142f8 	.word	0x200142f8

08003f34 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003f3a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f3e:	f04f 0120 	mov.w	r1, #32
 8003f42:	f381 8811 	msr	BASEPRI, r1
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	4817      	ldr	r0, [pc, #92]	; (8003fa8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003f4a:	f7fe fc52 	bl	80027f2 <_PreparePacket>
 8003f4e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	4b14      	ldr	r3, [pc, #80]	; (8003fac <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	e00b      	b.n	8003f78 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	1c59      	adds	r1, r3, #1
 8003f68:	6179      	str	r1, [r7, #20]
 8003f6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	09db      	lsrs	r3, r3, #7
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f7c:	d8f0      	bhi.n	8003f60 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	617a      	str	r2, [r7, #20]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003f8e:	221b      	movs	r2, #27
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	68b8      	ldr	r0, [r7, #8]
 8003f94:	f7fe fd20 	bl	80029d8 <_SendPacket>
  RECORD_END();
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f383 8811 	msr	BASEPRI, r3
}
 8003f9e:	bf00      	nop
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20014300 	.word	0x20014300
 8003fac:	200142fc 	.word	0x200142fc

08003fb0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8003fb0:	b40f      	push	{r0, r1, r2, r3}
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8003fb8:	f107 0314 	add.w	r3, r7, #20
 8003fbc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8003fbe:	1d3b      	adds	r3, r7, #4
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	6938      	ldr	r0, [r7, #16]
 8003fc6:	f7fe ff91 	bl	8002eec <_VPrintTarget>
  va_end(ParamList);
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fd4:	b004      	add	sp, #16
 8003fd6:	4770      	bx	lr

08003fd8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	; 0x28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003fe0:	f3ef 8311 	mrs	r3, BASEPRI
 8003fe4:	f04f 0120 	mov.w	r1, #32
 8003fe8:	f381 8811 	msr	BASEPRI, r1
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	4827      	ldr	r0, [pc, #156]	; (800408c <SEGGER_SYSVIEW_Warn+0xb4>)
 8003ff0:	f7fe fbff 	bl	80027f2 <_PreparePacket>
 8003ff4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003ff6:	2280      	movs	r2, #128	; 0x80
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	6938      	ldr	r0, [r7, #16]
 8003ffc:	f7fe fbac 	bl	8002758 <_EncodeStr>
 8004000:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
 8004006:	2301      	movs	r3, #1
 8004008:	623b      	str	r3, [r7, #32]
 800400a:	e00b      	b.n	8004024 <SEGGER_SYSVIEW_Warn+0x4c>
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	1c59      	adds	r1, r3, #1
 8004014:	6279      	str	r1, [r7, #36]	; 0x24
 8004016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	09db      	lsrs	r3, r3, #7
 8004022:	623b      	str	r3, [r7, #32]
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	2b7f      	cmp	r3, #127	; 0x7f
 8004028:	d8f0      	bhi.n	800400c <SEGGER_SYSVIEW_Warn+0x34>
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	627a      	str	r2, [r7, #36]	; 0x24
 8004030:	6a3a      	ldr	r2, [r7, #32]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	2300      	movs	r3, #0
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	e00b      	b.n	800405c <SEGGER_SYSVIEW_Warn+0x84>
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	b2da      	uxtb	r2, r3
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	1c59      	adds	r1, r3, #1
 800404c:	61f9      	str	r1, [r7, #28]
 800404e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	09db      	lsrs	r3, r3, #7
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b7f      	cmp	r3, #127	; 0x7f
 8004060:	d8f0      	bhi.n	8004044 <SEGGER_SYSVIEW_Warn+0x6c>
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	61fa      	str	r2, [r7, #28]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004072:	221a      	movs	r2, #26
 8004074:	68f9      	ldr	r1, [r7, #12]
 8004076:	6938      	ldr	r0, [r7, #16]
 8004078:	f7fe fcae 	bl	80029d8 <_SendPacket>
  RECORD_END();
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f383 8811 	msr	BASEPRI, r3
}
 8004082:	bf00      	nop
 8004084:	3728      	adds	r7, #40	; 0x28
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20014300 	.word	0x20014300

08004090 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004094:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004096:	7e1b      	ldrb	r3, [r3, #24]
 8004098:	4619      	mov	r1, r3
 800409a:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800409c:	460b      	mov	r3, r1
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	440b      	add	r3, r1
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	336c      	adds	r3, #108	; 0x6c
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80040ac:	7e1b      	ldrb	r3, [r3, #24]
 80040ae:	4618      	mov	r0, r3
 80040b0:	490d      	ldr	r1, [pc, #52]	; (80040e8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80040b2:	4603      	mov	r3, r0
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4403      	add	r3, r0
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	440b      	add	r3, r1
 80040bc:	3370      	adds	r3, #112	; 0x70
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d00b      	beq.n	80040dc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80040c4:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80040c6:	789b      	ldrb	r3, [r3, #2]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d107      	bne.n	80040dc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80040d2:	f7fe fb9b 	bl	800280c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80040d6:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80040d8:	2200      	movs	r2, #0
 80040da:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80040dc:	4b01      	ldr	r3, [pc, #4]	; (80040e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80040de:	781b      	ldrb	r3, [r3, #0]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	200142d0 	.word	0x200142d0
 80040e8:	20012e10 	.word	0x20012e10

080040ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040f2:	f000 fb99 	bl	8004828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040f6:	f000 f86d 	bl	80041d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040fa:	f000 f8d5 	bl	80042a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the cycle counter
  DWT_CTRL |= (0x1 << 0);	// Set SYCCNTENA bit of DWT_CYCCNT register
 80040fe:	4b2d      	ldr	r3, [pc, #180]	; (80041b4 <main+0xc8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a2c      	ldr	r2, [pc, #176]	; (80041b4 <main+0xc8>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6013      	str	r3, [r2, #0]

  // Initialize UART with desired baudrate for SEGGER SystemView with UART-based recording
  SEGGER_UART_init(500000);
 800410a:	482b      	ldr	r0, [pc, #172]	; (80041b8 <main+0xcc>)
 800410c:	f7fd fea8 	bl	8001e60 <SEGGER_UART_init>

  // Start the SEGGER SystemView recording of events
  SEGGER_SYSVIEW_Conf();
 8004110:	f7fd fcd0 	bl	8001ab4 <SEGGER_SYSVIEW_Conf>
  //SEGGER_SYSVIEW_Start(); // This function will be called from ThirdParty/Rec/segger_uart.c

  // Create LED_Green_Task and make sure that the task creation was successful
  status = xTaskCreate(led_green_task_handler, "LED_Green_Task", 200, NULL, 2, &led_green_task_handle);
 8004114:	f107 030c 	add.w	r3, r7, #12
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	2302      	movs	r3, #2
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	2300      	movs	r3, #0
 8004120:	22c8      	movs	r2, #200	; 0xc8
 8004122:	4926      	ldr	r1, [pc, #152]	; (80041bc <main+0xd0>)
 8004124:	4826      	ldr	r0, [pc, #152]	; (80041c0 <main+0xd4>)
 8004126:	f7fc fad3 	bl	80006d0 <xTaskCreate>
 800412a:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d00a      	beq.n	8004148 <main+0x5c>
        __asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	61bb      	str	r3, [r7, #24]
    }
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <main+0x5a>

  // Create LED_Orange_Task and make sure that the task creation was successful
  status = xTaskCreate(led_orange_task_handler, "LED_Orange_Task", 200, NULL, 2, &led_orange_task_handle);
 8004148:	f107 0308 	add.w	r3, r7, #8
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	2302      	movs	r3, #2
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	2300      	movs	r3, #0
 8004154:	22c8      	movs	r2, #200	; 0xc8
 8004156:	491b      	ldr	r1, [pc, #108]	; (80041c4 <main+0xd8>)
 8004158:	481b      	ldr	r0, [pc, #108]	; (80041c8 <main+0xdc>)
 800415a:	f7fc fab9 	bl	80006d0 <xTaskCreate>
 800415e:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d00a      	beq.n	800417c <main+0x90>
        __asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	617b      	str	r3, [r7, #20]
    }
 8004178:	bf00      	nop
 800417a:	e7fe      	b.n	800417a <main+0x8e>

  // Create LED_Red_Task and make sure that the task creation was successful
  status = xTaskCreate(led_red_task_handler, "LED_red_Task", 200, NULL, 2, &led_red_task_handle);
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	9301      	str	r3, [sp, #4]
 8004180:	2302      	movs	r3, #2
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	2300      	movs	r3, #0
 8004186:	22c8      	movs	r2, #200	; 0xc8
 8004188:	4910      	ldr	r1, [pc, #64]	; (80041cc <main+0xe0>)
 800418a:	4811      	ldr	r0, [pc, #68]	; (80041d0 <main+0xe4>)
 800418c:	f7fc faa0 	bl	80006d0 <xTaskCreate>
 8004190:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d00a      	beq.n	80041ae <main+0xc2>
        __asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	613b      	str	r3, [r7, #16]
    }
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <main+0xc0>

  // Start FreeRTOS scheduler
  // vTaskStartScheduler() never returns unless there's a problem launching scheduler
  vTaskStartScheduler();
 80041ae:	f7fc fc2b 	bl	8000a08 <vTaskStartScheduler>
  // not enough FreeRTOS heap to create the idle task or the timer task.
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80041b2:	e7fe      	b.n	80041b2 <main+0xc6>
 80041b4:	e0001000 	.word	0xe0001000
 80041b8:	0007a120 	.word	0x0007a120
 80041bc:	08005e90 	.word	0x08005e90
 80041c0:	08004565 	.word	0x08004565
 80041c4:	08005ea0 	.word	0x08005ea0
 80041c8:	08004591 	.word	0x08004591
 80041cc:	08005eb0 	.word	0x08005eb0
 80041d0:	080045bd 	.word	0x080045bd

080041d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b094      	sub	sp, #80	; 0x50
 80041d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041da:	f107 0320 	add.w	r3, r7, #32
 80041de:	2230      	movs	r2, #48	; 0x30
 80041e0:	2100      	movs	r1, #0
 80041e2:	4618      	mov	r0, r3
 80041e4:	f001 fdd6 	bl	8005d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041e8:	f107 030c 	add.w	r3, r7, #12
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	605a      	str	r2, [r3, #4]
 80041f2:	609a      	str	r2, [r3, #8]
 80041f4:	60da      	str	r2, [r3, #12]
 80041f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80041f8:	2300      	movs	r3, #0
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	4b28      	ldr	r3, [pc, #160]	; (80042a0 <SystemClock_Config+0xcc>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	4a27      	ldr	r2, [pc, #156]	; (80042a0 <SystemClock_Config+0xcc>)
 8004202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004206:	6413      	str	r3, [r2, #64]	; 0x40
 8004208:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <SystemClock_Config+0xcc>)
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004214:	2300      	movs	r3, #0
 8004216:	607b      	str	r3, [r7, #4]
 8004218:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <SystemClock_Config+0xd0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a21      	ldr	r2, [pc, #132]	; (80042a4 <SystemClock_Config+0xd0>)
 800421e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <SystemClock_Config+0xd0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004230:	2302      	movs	r3, #2
 8004232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004234:	2301      	movs	r3, #1
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004238:	2310      	movs	r3, #16
 800423a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800423c:	2302      	movs	r3, #2
 800423e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004240:	2300      	movs	r3, #0
 8004242:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004244:	2308      	movs	r3, #8
 8004246:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004248:	23a8      	movs	r3, #168	; 0xa8
 800424a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800424c:	2302      	movs	r3, #2
 800424e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004250:	2307      	movs	r3, #7
 8004252:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004254:	f107 0320 	add.w	r3, r7, #32
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fdf5 	bl	8004e48 <HAL_RCC_OscConfig>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004264:	f000 f9da 	bl	800461c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004268:	230f      	movs	r3, #15
 800426a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800426c:	2302      	movs	r3, #2
 800426e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004274:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004278:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800427a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800427e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004280:	f107 030c 	add.w	r3, r7, #12
 8004284:	2105      	movs	r1, #5
 8004286:	4618      	mov	r0, r3
 8004288:	f001 f856 	bl	8005338 <HAL_RCC_ClockConfig>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004292:	f000 f9c3 	bl	800461c <Error_Handler>
  }
}
 8004296:	bf00      	nop
 8004298:	3750      	adds	r7, #80	; 0x50
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40007000 	.word	0x40007000

080042a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08c      	sub	sp, #48	; 0x30
 80042ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ae:	f107 031c 	add.w	r3, r7, #28
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	609a      	str	r2, [r3, #8]
 80042ba:	60da      	str	r2, [r3, #12]
 80042bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	4ba2      	ldr	r3, [pc, #648]	; (800454c <MX_GPIO_Init+0x2a4>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	4aa1      	ldr	r2, [pc, #644]	; (800454c <MX_GPIO_Init+0x2a4>)
 80042c8:	f043 0310 	orr.w	r3, r3, #16
 80042cc:	6313      	str	r3, [r2, #48]	; 0x30
 80042ce:	4b9f      	ldr	r3, [pc, #636]	; (800454c <MX_GPIO_Init+0x2a4>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	4b9b      	ldr	r3, [pc, #620]	; (800454c <MX_GPIO_Init+0x2a4>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	4a9a      	ldr	r2, [pc, #616]	; (800454c <MX_GPIO_Init+0x2a4>)
 80042e4:	f043 0304 	orr.w	r3, r3, #4
 80042e8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ea:	4b98      	ldr	r3, [pc, #608]	; (800454c <MX_GPIO_Init+0x2a4>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	4b94      	ldr	r3, [pc, #592]	; (800454c <MX_GPIO_Init+0x2a4>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	4a93      	ldr	r2, [pc, #588]	; (800454c <MX_GPIO_Init+0x2a4>)
 8004300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004304:	6313      	str	r3, [r2, #48]	; 0x30
 8004306:	4b91      	ldr	r3, [pc, #580]	; (800454c <MX_GPIO_Init+0x2a4>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	4b8d      	ldr	r3, [pc, #564]	; (800454c <MX_GPIO_Init+0x2a4>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	4a8c      	ldr	r2, [pc, #560]	; (800454c <MX_GPIO_Init+0x2a4>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6313      	str	r3, [r2, #48]	; 0x30
 8004322:	4b8a      	ldr	r3, [pc, #552]	; (800454c <MX_GPIO_Init+0x2a4>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800432e:	2300      	movs	r3, #0
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	4b86      	ldr	r3, [pc, #536]	; (800454c <MX_GPIO_Init+0x2a4>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	4a85      	ldr	r2, [pc, #532]	; (800454c <MX_GPIO_Init+0x2a4>)
 8004338:	f043 0302 	orr.w	r3, r3, #2
 800433c:	6313      	str	r3, [r2, #48]	; 0x30
 800433e:	4b83      	ldr	r3, [pc, #524]	; (800454c <MX_GPIO_Init+0x2a4>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	60bb      	str	r3, [r7, #8]
 8004348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	4b7f      	ldr	r3, [pc, #508]	; (800454c <MX_GPIO_Init+0x2a4>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	4a7e      	ldr	r2, [pc, #504]	; (800454c <MX_GPIO_Init+0x2a4>)
 8004354:	f043 0308 	orr.w	r3, r3, #8
 8004358:	6313      	str	r3, [r2, #48]	; 0x30
 800435a:	4b7c      	ldr	r3, [pc, #496]	; (800454c <MX_GPIO_Init+0x2a4>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	607b      	str	r3, [r7, #4]
 8004364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004366:	2200      	movs	r2, #0
 8004368:	2108      	movs	r1, #8
 800436a:	4879      	ldr	r0, [pc, #484]	; (8004550 <MX_GPIO_Init+0x2a8>)
 800436c:	f000 fd1c 	bl	8004da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004370:	2201      	movs	r2, #1
 8004372:	2101      	movs	r1, #1
 8004374:	4877      	ldr	r0, [pc, #476]	; (8004554 <MX_GPIO_Init+0x2ac>)
 8004376:	f000 fd17 	bl	8004da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800437a:	2200      	movs	r2, #0
 800437c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8004380:	4875      	ldr	r0, [pc, #468]	; (8004558 <MX_GPIO_Init+0x2b0>)
 8004382:	f000 fd11 	bl	8004da8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004386:	2308      	movs	r3, #8
 8004388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800438a:	2301      	movs	r3, #1
 800438c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	2300      	movs	r3, #0
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004392:	2300      	movs	r3, #0
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004396:	f107 031c 	add.w	r3, r7, #28
 800439a:	4619      	mov	r1, r3
 800439c:	486c      	ldr	r0, [pc, #432]	; (8004550 <MX_GPIO_Init+0x2a8>)
 800439e:	f000 fb67 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043a6:	2301      	movs	r3, #1
 80043a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ae:	2300      	movs	r3, #0
 80043b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80043b2:	f107 031c 	add.w	r3, r7, #28
 80043b6:	4619      	mov	r1, r3
 80043b8:	4866      	ldr	r0, [pc, #408]	; (8004554 <MX_GPIO_Init+0x2ac>)
 80043ba:	f000 fb59 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80043be:	2308      	movs	r3, #8
 80043c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c2:	2302      	movs	r3, #2
 80043c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ca:	2300      	movs	r3, #0
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80043ce:	2305      	movs	r3, #5
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80043d2:	f107 031c 	add.w	r3, r7, #28
 80043d6:	4619      	mov	r1, r3
 80043d8:	485e      	ldr	r0, [pc, #376]	; (8004554 <MX_GPIO_Init+0x2ac>)
 80043da:	f000 fb49 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80043de:	2301      	movs	r3, #1
 80043e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80043e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80043ec:	f107 031c 	add.w	r3, r7, #28
 80043f0:	4619      	mov	r1, r3
 80043f2:	485a      	ldr	r0, [pc, #360]	; (800455c <MX_GPIO_Init+0x2b4>)
 80043f4:	f000 fb3c 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80043f8:	2310      	movs	r3, #16
 80043fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fc:	2302      	movs	r3, #2
 80043fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004400:	2300      	movs	r3, #0
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004404:	2300      	movs	r3, #0
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004408:	2306      	movs	r3, #6
 800440a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800440c:	f107 031c 	add.w	r3, r7, #28
 8004410:	4619      	mov	r1, r3
 8004412:	4852      	ldr	r0, [pc, #328]	; (800455c <MX_GPIO_Init+0x2b4>)
 8004414:	f000 fb2c 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004418:	23e0      	movs	r3, #224	; 0xe0
 800441a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441c:	2302      	movs	r3, #2
 800441e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004420:	2300      	movs	r3, #0
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004424:	2300      	movs	r3, #0
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004428:	2305      	movs	r3, #5
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800442c:	f107 031c 	add.w	r3, r7, #28
 8004430:	4619      	mov	r1, r3
 8004432:	484a      	ldr	r0, [pc, #296]	; (800455c <MX_GPIO_Init+0x2b4>)
 8004434:	f000 fb1c 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004438:	2304      	movs	r3, #4
 800443a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800443c:	2300      	movs	r3, #0
 800443e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004440:	2300      	movs	r3, #0
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004444:	f107 031c 	add.w	r3, r7, #28
 8004448:	4619      	mov	r1, r3
 800444a:	4845      	ldr	r0, [pc, #276]	; (8004560 <MX_GPIO_Init+0x2b8>)
 800444c:	f000 fb10 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8004450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004456:	2302      	movs	r3, #2
 8004458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445a:	2300      	movs	r3, #0
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445e:	2300      	movs	r3, #0
 8004460:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004462:	2305      	movs	r3, #5
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8004466:	f107 031c 	add.w	r3, r7, #28
 800446a:	4619      	mov	r1, r3
 800446c:	483c      	ldr	r0, [pc, #240]	; (8004560 <MX_GPIO_Init+0x2b8>)
 800446e:	f000 faff 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004472:	f24f 0310 	movw	r3, #61456	; 0xf010
 8004476:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004478:	2301      	movs	r3, #1
 800447a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447c:	2300      	movs	r3, #0
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004480:	2300      	movs	r3, #0
 8004482:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004484:	f107 031c 	add.w	r3, r7, #28
 8004488:	4619      	mov	r1, r3
 800448a:	4833      	ldr	r0, [pc, #204]	; (8004558 <MX_GPIO_Init+0x2b0>)
 800448c:	f000 faf0 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8004490:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8004494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004496:	2302      	movs	r3, #2
 8004498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449a:	2300      	movs	r3, #0
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449e:	2300      	movs	r3, #0
 80044a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80044a2:	2306      	movs	r3, #6
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044a6:	f107 031c 	add.w	r3, r7, #28
 80044aa:	4619      	mov	r1, r3
 80044ac:	4829      	ldr	r0, [pc, #164]	; (8004554 <MX_GPIO_Init+0x2ac>)
 80044ae:	f000 fadf 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80044b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044b8:	2300      	movs	r3, #0
 80044ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80044c0:	f107 031c 	add.w	r3, r7, #28
 80044c4:	4619      	mov	r1, r3
 80044c6:	4825      	ldr	r0, [pc, #148]	; (800455c <MX_GPIO_Init+0x2b4>)
 80044c8:	f000 fad2 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80044cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80044d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d2:	2302      	movs	r3, #2
 80044d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044da:	2300      	movs	r3, #0
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80044de:	230a      	movs	r3, #10
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e2:	f107 031c 	add.w	r3, r7, #28
 80044e6:	4619      	mov	r1, r3
 80044e8:	481c      	ldr	r0, [pc, #112]	; (800455c <MX_GPIO_Init+0x2b4>)
 80044ea:	f000 fac1 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80044ee:	2320      	movs	r3, #32
 80044f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044f2:	2300      	movs	r3, #0
 80044f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80044fa:	f107 031c 	add.w	r3, r7, #28
 80044fe:	4619      	mov	r1, r3
 8004500:	4815      	ldr	r0, [pc, #84]	; (8004558 <MX_GPIO_Init+0x2b0>)
 8004502:	f000 fab5 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004506:	f44f 7310 	mov.w	r3, #576	; 0x240
 800450a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800450c:	2312      	movs	r3, #18
 800450e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004510:	2300      	movs	r3, #0
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004514:	2300      	movs	r3, #0
 8004516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004518:	2304      	movs	r3, #4
 800451a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800451c:	f107 031c 	add.w	r3, r7, #28
 8004520:	4619      	mov	r1, r3
 8004522:	480f      	ldr	r0, [pc, #60]	; (8004560 <MX_GPIO_Init+0x2b8>)
 8004524:	f000 faa4 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004528:	2302      	movs	r3, #2
 800452a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800452c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8004530:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004532:	2300      	movs	r3, #0
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004536:	f107 031c 	add.w	r3, r7, #28
 800453a:	4619      	mov	r1, r3
 800453c:	4804      	ldr	r0, [pc, #16]	; (8004550 <MX_GPIO_Init+0x2a8>)
 800453e:	f000 fa97 	bl	8004a70 <HAL_GPIO_Init>

}
 8004542:	bf00      	nop
 8004544:	3730      	adds	r7, #48	; 0x30
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40023800 	.word	0x40023800
 8004550:	40021000 	.word	0x40021000
 8004554:	40020800 	.word	0x40020800
 8004558:	40020c00 	.word	0x40020c00
 800455c:	40020000 	.word	0x40020000
 8004560:	40020400 	.word	0x40020400

08004564 <led_green_task_handler>:

/* USER CODE BEGIN 4 */

static void led_green_task_handler(void *parameters)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 800456c:	4806      	ldr	r0, [pc, #24]	; (8004588 <led_green_task_handler+0x24>)
 800456e:	f7ff fd1f 	bl	8003fb0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8004572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004576:	4805      	ldr	r0, [pc, #20]	; (800458c <led_green_task_handler+0x28>)
 8004578:	f000 fc2f 	bl	8004dda <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));	// non-blocking delay
 800457c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004580:	f7fc fa0a 	bl	8000998 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8004584:	e7f2      	b.n	800456c <led_green_task_handler+0x8>
 8004586:	bf00      	nop
 8004588:	08005ec0 	.word	0x08005ec0
 800458c:	40020c00 	.word	0x40020c00

08004590 <led_orange_task_handler>:
	}
}
static void led_orange_task_handler(void *parameters)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	while (1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8004598:	4806      	ldr	r0, [pc, #24]	; (80045b4 <led_orange_task_handler+0x24>)
 800459a:	f7ff fd09 	bl	8003fb0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 800459e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045a2:	4805      	ldr	r0, [pc, #20]	; (80045b8 <led_orange_task_handler+0x28>)
 80045a4:	f000 fc19 	bl	8004dda <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(800));	// non-blocking delay
 80045a8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80045ac:	f7fc f9f4 	bl	8000998 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80045b0:	e7f2      	b.n	8004598 <led_orange_task_handler+0x8>
 80045b2:	bf00      	nop
 80045b4:	08005ed4 	.word	0x08005ed4
 80045b8:	40020c00 	.word	0x40020c00

080045bc <led_red_task_handler>:
	}
}

static void led_red_task_handler(void *parameters)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
	while (1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80045c4:	4806      	ldr	r0, [pc, #24]	; (80045e0 <led_red_task_handler+0x24>)
 80045c6:	f7ff fcf3 	bl	8003fb0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 80045ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045ce:	4805      	ldr	r0, [pc, #20]	; (80045e4 <led_red_task_handler+0x28>)
 80045d0:	f000 fc03 	bl	8004dda <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(400));	// non-blocking delay
 80045d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80045d8:	f7fc f9de 	bl	8000998 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80045dc:	e7f2      	b.n	80045c4 <led_red_task_handler+0x8>
 80045de:	bf00      	nop
 80045e0:	08005ee8 	.word	0x08005ee8
 80045e4:	40020c00 	.word	0x40020c00

080045e8 <vApplicationIdleHook>:
	}
}

void vApplicationIdleHook(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80045ec:	2101      	movs	r1, #1
 80045ee:	2000      	movs	r0, #0
 80045f0:	f000 fc0e 	bl	8004e10 <HAL_PWR_EnterSLEEPMode>
}
 80045f4:	bf00      	nop
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a04      	ldr	r2, [pc, #16]	; (8004618 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d101      	bne.n	800460e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800460a:	f000 f92f 	bl	800486c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40001000 	.word	0x40001000

0800461c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004620:	b672      	cpsid	i
}
 8004622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004624:	e7fe      	b.n	8004624 <Error_Handler+0x8>
	...

08004628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_MspInit+0x4c>)
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	4a0f      	ldr	r2, [pc, #60]	; (8004674 <HAL_MspInit+0x4c>)
 8004638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800463c:	6453      	str	r3, [r2, #68]	; 0x44
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <HAL_MspInit+0x4c>)
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004646:	607b      	str	r3, [r7, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800464a:	2300      	movs	r3, #0
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_MspInit+0x4c>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	4a08      	ldr	r2, [pc, #32]	; (8004674 <HAL_MspInit+0x4c>)
 8004654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004658:	6413      	str	r3, [r2, #64]	; 0x40
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_MspInit+0x4c>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8004666:	f7fc fe6f 	bl	8001348 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40023800 	.word	0x40023800

08004678 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08e      	sub	sp, #56	; 0x38
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	4b33      	ldr	r3, [pc, #204]	; (800475c <HAL_InitTick+0xe4>)
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	4a32      	ldr	r2, [pc, #200]	; (800475c <HAL_InitTick+0xe4>)
 8004692:	f043 0310 	orr.w	r3, r3, #16
 8004696:	6413      	str	r3, [r2, #64]	; 0x40
 8004698:	4b30      	ldr	r3, [pc, #192]	; (800475c <HAL_InitTick+0xe4>)
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80046a4:	f107 0210 	add.w	r2, r7, #16
 80046a8:	f107 0314 	add.w	r3, r7, #20
 80046ac:	4611      	mov	r1, r2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f001 f84e 	bl	8005750 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80046b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80046be:	f001 f833 	bl	8005728 <HAL_RCC_GetPCLK1Freq>
 80046c2:	6378      	str	r0, [r7, #52]	; 0x34
 80046c4:	e004      	b.n	80046d0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80046c6:	f001 f82f 	bl	8005728 <HAL_RCC_GetPCLK1Freq>
 80046ca:	4603      	mov	r3, r0
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80046d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d2:	4a23      	ldr	r2, [pc, #140]	; (8004760 <HAL_InitTick+0xe8>)
 80046d4:	fba2 2303 	umull	r2, r3, r2, r3
 80046d8:	0c9b      	lsrs	r3, r3, #18
 80046da:	3b01      	subs	r3, #1
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80046de:	4b21      	ldr	r3, [pc, #132]	; (8004764 <HAL_InitTick+0xec>)
 80046e0:	4a21      	ldr	r2, [pc, #132]	; (8004768 <HAL_InitTick+0xf0>)
 80046e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80046e4:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <HAL_InitTick+0xec>)
 80046e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80046ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80046ec:	4a1d      	ldr	r2, [pc, #116]	; (8004764 <HAL_InitTick+0xec>)
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80046f2:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <HAL_InitTick+0xec>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <HAL_InitTick+0xec>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046fe:	4b19      	ldr	r3, [pc, #100]	; (8004764 <HAL_InitTick+0xec>)
 8004700:	2200      	movs	r2, #0
 8004702:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004704:	4817      	ldr	r0, [pc, #92]	; (8004764 <HAL_InitTick+0xec>)
 8004706:	f001 f855 	bl	80057b4 <HAL_TIM_Base_Init>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004710:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004714:	2b00      	cmp	r3, #0
 8004716:	d11b      	bne.n	8004750 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004718:	4812      	ldr	r0, [pc, #72]	; (8004764 <HAL_InitTick+0xec>)
 800471a:	f001 f8a5 	bl	8005868 <HAL_TIM_Base_Start_IT>
 800471e:	4603      	mov	r3, r0
 8004720:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004724:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004728:	2b00      	cmp	r3, #0
 800472a:	d111      	bne.n	8004750 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800472c:	2036      	movs	r0, #54	; 0x36
 800472e:	f000 f991 	bl	8004a54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b0f      	cmp	r3, #15
 8004736:	d808      	bhi.n	800474a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004738:	2200      	movs	r2, #0
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	2036      	movs	r0, #54	; 0x36
 800473e:	f000 f96d 	bl	8004a1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004742:	4a0a      	ldr	r2, [pc, #40]	; (800476c <HAL_InitTick+0xf4>)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e002      	b.n	8004750 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004750:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004754:	4618      	mov	r0, r3
 8004756:	3738      	adds	r7, #56	; 0x38
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40023800 	.word	0x40023800
 8004760:	431bde83 	.word	0x431bde83
 8004764:	200143e4 	.word	0x200143e4
 8004768:	40001000 	.word	0x40001000
 800476c:	20000014 	.word	0x20000014

08004770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004774:	e7fe      	b.n	8004774 <NMI_Handler+0x4>

08004776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004776:	b480      	push	{r7}
 8004778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800477a:	e7fe      	b.n	800477a <HardFault_Handler+0x4>

0800477c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004780:	e7fe      	b.n	8004780 <MemManage_Handler+0x4>

08004782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004782:	b480      	push	{r7}
 8004784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004786:	e7fe      	b.n	8004786 <BusFault_Handler+0x4>

08004788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800478c:	e7fe      	b.n	800478c <UsageFault_Handler+0x4>

0800478e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800478e:	b480      	push	{r7}
 8004790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004792:	bf00      	nop
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80047a0:	4802      	ldr	r0, [pc, #8]	; (80047ac <TIM6_DAC_IRQHandler+0x10>)
 80047a2:	f001 f8d1 	bl	8005948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80047a6:	bf00      	nop
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	200143e4 	.word	0x200143e4

080047b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <SystemInit+0x20>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	4a05      	ldr	r2, [pc, #20]	; (80047d0 <SystemInit+0x20>)
 80047bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	e000ed00 	.word	0xe000ed00

080047d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80047d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800480c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047d8:	480d      	ldr	r0, [pc, #52]	; (8004810 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80047da:	490e      	ldr	r1, [pc, #56]	; (8004814 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80047dc:	4a0e      	ldr	r2, [pc, #56]	; (8004818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80047de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047e0:	e002      	b.n	80047e8 <LoopCopyDataInit>

080047e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047e6:	3304      	adds	r3, #4

080047e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047ec:	d3f9      	bcc.n	80047e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047ee:	4a0b      	ldr	r2, [pc, #44]	; (800481c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80047f0:	4c0b      	ldr	r4, [pc, #44]	; (8004820 <LoopFillZerobss+0x26>)
  movs r3, #0
 80047f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047f4:	e001      	b.n	80047fa <LoopFillZerobss>

080047f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047f8:	3204      	adds	r2, #4

080047fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047fc:	d3fb      	bcc.n	80047f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80047fe:	f7ff ffd7 	bl	80047b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004802:	f001 fa85 	bl	8005d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004806:	f7ff fc71 	bl	80040ec <main>
  bx  lr    
 800480a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800480c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004814:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8004818:	08005f4c 	.word	0x08005f4c
  ldr r2, =_sbss
 800481c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8004820:	20014430 	.word	0x20014430

08004824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004824:	e7fe      	b.n	8004824 <ADC_IRQHandler>
	...

08004828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800482c:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <HAL_Init+0x40>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a0d      	ldr	r2, [pc, #52]	; (8004868 <HAL_Init+0x40>)
 8004832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004836:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_Init+0x40>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <HAL_Init+0x40>)
 800483e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004842:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004844:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_Init+0x40>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a07      	ldr	r2, [pc, #28]	; (8004868 <HAL_Init+0x40>)
 800484a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004850:	2003      	movs	r0, #3
 8004852:	f000 f8d8 	bl	8004a06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004856:	2000      	movs	r0, #0
 8004858:	f7ff ff0e 	bl	8004678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800485c:	f7ff fee4 	bl	8004628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023c00 	.word	0x40023c00

0800486c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_IncTick+0x20>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_IncTick+0x24>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4413      	add	r3, r2
 800487c:	4a04      	ldr	r2, [pc, #16]	; (8004890 <HAL_IncTick+0x24>)
 800487e:	6013      	str	r3, [r2, #0]
}
 8004880:	bf00      	nop
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000018 	.word	0x20000018
 8004890:	2001442c 	.word	0x2001442c

08004894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return uwTick;
 8004898:	4b03      	ldr	r3, [pc, #12]	; (80048a8 <HAL_GetTick+0x14>)
 800489a:	681b      	ldr	r3, [r3, #0]
}
 800489c:	4618      	mov	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	2001442c 	.word	0x2001442c

080048ac <__NVIC_SetPriorityGrouping>:
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <__NVIC_SetPriorityGrouping+0x44>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048c8:	4013      	ands	r3, r2
 80048ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048de:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <__NVIC_SetPriorityGrouping+0x44>)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	60d3      	str	r3, [r2, #12]
}
 80048e4:	bf00      	nop
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	e000ed00 	.word	0xe000ed00

080048f4 <__NVIC_GetPriorityGrouping>:
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048f8:	4b04      	ldr	r3, [pc, #16]	; (800490c <__NVIC_GetPriorityGrouping+0x18>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	0a1b      	lsrs	r3, r3, #8
 80048fe:	f003 0307 	and.w	r3, r3, #7
}
 8004902:	4618      	mov	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	e000ed00 	.word	0xe000ed00

08004910 <__NVIC_EnableIRQ>:
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800491a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491e:	2b00      	cmp	r3, #0
 8004920:	db0b      	blt.n	800493a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	f003 021f 	and.w	r2, r3, #31
 8004928:	4907      	ldr	r1, [pc, #28]	; (8004948 <__NVIC_EnableIRQ+0x38>)
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2001      	movs	r0, #1
 8004932:	fa00 f202 	lsl.w	r2, r0, r2
 8004936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	e000e100 	.word	0xe000e100

0800494c <__NVIC_SetPriority>:
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	6039      	str	r1, [r7, #0]
 8004956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495c:	2b00      	cmp	r3, #0
 800495e:	db0a      	blt.n	8004976 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	b2da      	uxtb	r2, r3
 8004964:	490c      	ldr	r1, [pc, #48]	; (8004998 <__NVIC_SetPriority+0x4c>)
 8004966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496a:	0112      	lsls	r2, r2, #4
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	440b      	add	r3, r1
 8004970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004974:	e00a      	b.n	800498c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	b2da      	uxtb	r2, r3
 800497a:	4908      	ldr	r1, [pc, #32]	; (800499c <__NVIC_SetPriority+0x50>)
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	3b04      	subs	r3, #4
 8004984:	0112      	lsls	r2, r2, #4
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	440b      	add	r3, r1
 800498a:	761a      	strb	r2, [r3, #24]
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000e100 	.word	0xe000e100
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b089      	sub	sp, #36	; 0x24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f1c3 0307 	rsb	r3, r3, #7
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	bf28      	it	cs
 80049be:	2304      	movcs	r3, #4
 80049c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	3304      	adds	r3, #4
 80049c6:	2b06      	cmp	r3, #6
 80049c8:	d902      	bls.n	80049d0 <NVIC_EncodePriority+0x30>
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	3b03      	subs	r3, #3
 80049ce:	e000      	b.n	80049d2 <NVIC_EncodePriority+0x32>
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43da      	mvns	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	401a      	ands	r2, r3
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
 80049f2:	43d9      	mvns	r1, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f8:	4313      	orrs	r3, r2
         );
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3724      	adds	r7, #36	; 0x24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b082      	sub	sp, #8
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ff4c 	bl	80048ac <__NVIC_SetPriorityGrouping>
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a2e:	f7ff ff61 	bl	80048f4 <__NVIC_GetPriorityGrouping>
 8004a32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	6978      	ldr	r0, [r7, #20]
 8004a3a:	f7ff ffb1 	bl	80049a0 <NVIC_EncodePriority>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff ff80 	bl	800494c <__NVIC_SetPriority>
}
 8004a4c:	bf00      	nop
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff ff54 	bl	8004910 <__NVIC_EnableIRQ>
}
 8004a68:	bf00      	nop
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	e16b      	b.n	8004d64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	f040 815a 	bne.w	8004d5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d005      	beq.n	8004ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d130      	bne.n	8004b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	2203      	movs	r2, #3
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004af8:	2201      	movs	r2, #1
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	4013      	ands	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	091b      	lsrs	r3, r3, #4
 8004b0e:	f003 0201 	and.w	r2, r3, #1
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d017      	beq.n	8004b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	4013      	ands	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 0303 	and.w	r3, r3, #3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d123      	bne.n	8004bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	08da      	lsrs	r2, r3, #3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3208      	adds	r2, #8
 8004b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	220f      	movs	r2, #15
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	08da      	lsrs	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3208      	adds	r2, #8
 8004bae:	69b9      	ldr	r1, [r7, #24]
 8004bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 0203 	and.w	r2, r3, #3
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80b4 	beq.w	8004d5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	4b60      	ldr	r3, [pc, #384]	; (8004d7c <HAL_GPIO_Init+0x30c>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	4a5f      	ldr	r2, [pc, #380]	; (8004d7c <HAL_GPIO_Init+0x30c>)
 8004c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c04:	6453      	str	r3, [r2, #68]	; 0x44
 8004c06:	4b5d      	ldr	r3, [pc, #372]	; (8004d7c <HAL_GPIO_Init+0x30c>)
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c12:	4a5b      	ldr	r2, [pc, #364]	; (8004d80 <HAL_GPIO_Init+0x310>)
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	3302      	adds	r3, #2
 8004c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	220f      	movs	r2, #15
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4013      	ands	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a52      	ldr	r2, [pc, #328]	; (8004d84 <HAL_GPIO_Init+0x314>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d02b      	beq.n	8004c96 <HAL_GPIO_Init+0x226>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a51      	ldr	r2, [pc, #324]	; (8004d88 <HAL_GPIO_Init+0x318>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d025      	beq.n	8004c92 <HAL_GPIO_Init+0x222>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a50      	ldr	r2, [pc, #320]	; (8004d8c <HAL_GPIO_Init+0x31c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01f      	beq.n	8004c8e <HAL_GPIO_Init+0x21e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a4f      	ldr	r2, [pc, #316]	; (8004d90 <HAL_GPIO_Init+0x320>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d019      	beq.n	8004c8a <HAL_GPIO_Init+0x21a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a4e      	ldr	r2, [pc, #312]	; (8004d94 <HAL_GPIO_Init+0x324>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <HAL_GPIO_Init+0x216>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a4d      	ldr	r2, [pc, #308]	; (8004d98 <HAL_GPIO_Init+0x328>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00d      	beq.n	8004c82 <HAL_GPIO_Init+0x212>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a4c      	ldr	r2, [pc, #304]	; (8004d9c <HAL_GPIO_Init+0x32c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d007      	beq.n	8004c7e <HAL_GPIO_Init+0x20e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a4b      	ldr	r2, [pc, #300]	; (8004da0 <HAL_GPIO_Init+0x330>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d101      	bne.n	8004c7a <HAL_GPIO_Init+0x20a>
 8004c76:	2307      	movs	r3, #7
 8004c78:	e00e      	b.n	8004c98 <HAL_GPIO_Init+0x228>
 8004c7a:	2308      	movs	r3, #8
 8004c7c:	e00c      	b.n	8004c98 <HAL_GPIO_Init+0x228>
 8004c7e:	2306      	movs	r3, #6
 8004c80:	e00a      	b.n	8004c98 <HAL_GPIO_Init+0x228>
 8004c82:	2305      	movs	r3, #5
 8004c84:	e008      	b.n	8004c98 <HAL_GPIO_Init+0x228>
 8004c86:	2304      	movs	r3, #4
 8004c88:	e006      	b.n	8004c98 <HAL_GPIO_Init+0x228>
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e004      	b.n	8004c98 <HAL_GPIO_Init+0x228>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e002      	b.n	8004c98 <HAL_GPIO_Init+0x228>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <HAL_GPIO_Init+0x228>
 8004c96:	2300      	movs	r3, #0
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	f002 0203 	and.w	r2, r2, #3
 8004c9e:	0092      	lsls	r2, r2, #2
 8004ca0:	4093      	lsls	r3, r2
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ca8:	4935      	ldr	r1, [pc, #212]	; (8004d80 <HAL_GPIO_Init+0x310>)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	089b      	lsrs	r3, r3, #2
 8004cae:	3302      	adds	r3, #2
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cb6:	4b3b      	ldr	r3, [pc, #236]	; (8004da4 <HAL_GPIO_Init+0x334>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cda:	4a32      	ldr	r2, [pc, #200]	; (8004da4 <HAL_GPIO_Init+0x334>)
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ce0:	4b30      	ldr	r3, [pc, #192]	; (8004da4 <HAL_GPIO_Init+0x334>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4013      	ands	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d04:	4a27      	ldr	r2, [pc, #156]	; (8004da4 <HAL_GPIO_Init+0x334>)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d0a:	4b26      	ldr	r3, [pc, #152]	; (8004da4 <HAL_GPIO_Init+0x334>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	43db      	mvns	r3, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4013      	ands	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d2e:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <HAL_GPIO_Init+0x334>)
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d34:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <HAL_GPIO_Init+0x334>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4013      	ands	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d58:	4a12      	ldr	r2, [pc, #72]	; (8004da4 <HAL_GPIO_Init+0x334>)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	3301      	adds	r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	2b0f      	cmp	r3, #15
 8004d68:	f67f ae90 	bls.w	8004a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	3724      	adds	r7, #36	; 0x24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	40013800 	.word	0x40013800
 8004d84:	40020000 	.word	0x40020000
 8004d88:	40020400 	.word	0x40020400
 8004d8c:	40020800 	.word	0x40020800
 8004d90:	40020c00 	.word	0x40020c00
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40021400 	.word	0x40021400
 8004d9c:	40021800 	.word	0x40021800
 8004da0:	40021c00 	.word	0x40021c00
 8004da4:	40013c00 	.word	0x40013c00

08004da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	807b      	strh	r3, [r7, #2]
 8004db4:	4613      	mov	r3, r2
 8004db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004db8:	787b      	ldrb	r3, [r7, #1]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dbe:	887a      	ldrh	r2, [r7, #2]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dc4:	e003      	b.n	8004dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dc6:	887b      	ldrh	r3, [r7, #2]
 8004dc8:	041a      	lsls	r2, r3, #16
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	619a      	str	r2, [r3, #24]
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	460b      	mov	r3, r1
 8004de4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004dec:	887a      	ldrh	r2, [r7, #2]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4013      	ands	r3, r2
 8004df2:	041a      	lsls	r2, r3, #16
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	43d9      	mvns	r1, r3
 8004df8:	887b      	ldrh	r3, [r7, #2]
 8004dfa:	400b      	ands	r3, r1
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	619a      	str	r2, [r3, #24]
}
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4a08      	ldr	r2, [pc, #32]	; (8004e44 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004e22:	f023 0304 	bic.w	r3, r3, #4
 8004e26:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004e2e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8004e30:	e002      	b.n	8004e38 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8004e32:	bf40      	sev
    __WFE();
 8004e34:	bf20      	wfe
    __WFE();
 8004e36:	bf20      	wfe
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	e000ed00 	.word	0xe000ed00

08004e48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e267      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d075      	beq.n	8004f52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e66:	4b88      	ldr	r3, [pc, #544]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d00c      	beq.n	8004e8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e72:	4b85      	ldr	r3, [pc, #532]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d112      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e7e:	4b82      	ldr	r3, [pc, #520]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e8a:	d10b      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e8c:	4b7e      	ldr	r3, [pc, #504]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d05b      	beq.n	8004f50 <HAL_RCC_OscConfig+0x108>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d157      	bne.n	8004f50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e242      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eac:	d106      	bne.n	8004ebc <HAL_RCC_OscConfig+0x74>
 8004eae:	4b76      	ldr	r3, [pc, #472]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a75      	ldr	r2, [pc, #468]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e01d      	b.n	8004ef8 <HAL_RCC_OscConfig+0xb0>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x98>
 8004ec6:	4b70      	ldr	r3, [pc, #448]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a6f      	ldr	r2, [pc, #444]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	4b6d      	ldr	r3, [pc, #436]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a6c      	ldr	r2, [pc, #432]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e00b      	b.n	8004ef8 <HAL_RCC_OscConfig+0xb0>
 8004ee0:	4b69      	ldr	r3, [pc, #420]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a68      	ldr	r2, [pc, #416]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	4b66      	ldr	r3, [pc, #408]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a65      	ldr	r2, [pc, #404]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d013      	beq.n	8004f28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f00:	f7ff fcc8 	bl	8004894 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f08:	f7ff fcc4 	bl	8004894 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	; 0x64
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e207      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1a:	4b5b      	ldr	r3, [pc, #364]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0xc0>
 8004f26:	e014      	b.n	8004f52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f28:	f7ff fcb4 	bl	8004894 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f30:	f7ff fcb0 	bl	8004894 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	; 0x64
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e1f3      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f42:	4b51      	ldr	r3, [pc, #324]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0xe8>
 8004f4e:	e000      	b.n	8004f52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d063      	beq.n	8005026 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f5e:	4b4a      	ldr	r3, [pc, #296]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f6a:	4b47      	ldr	r3, [pc, #284]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d11c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f76:	4b44      	ldr	r3, [pc, #272]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d116      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f82:	4b41      	ldr	r3, [pc, #260]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <HAL_RCC_OscConfig+0x152>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d001      	beq.n	8004f9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e1c7      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9a:	4b3b      	ldr	r3, [pc, #236]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4937      	ldr	r1, [pc, #220]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fae:	e03a      	b.n	8005026 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d020      	beq.n	8004ffa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fb8:	4b34      	ldr	r3, [pc, #208]	; (800508c <HAL_RCC_OscConfig+0x244>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbe:	f7ff fc69 	bl	8004894 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fc6:	f7ff fc65 	bl	8004894 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e1a8      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd8:	4b2b      	ldr	r3, [pc, #172]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe4:	4b28      	ldr	r3, [pc, #160]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	4925      	ldr	r1, [pc, #148]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	600b      	str	r3, [r1, #0]
 8004ff8:	e015      	b.n	8005026 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ffa:	4b24      	ldr	r3, [pc, #144]	; (800508c <HAL_RCC_OscConfig+0x244>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7ff fc48 	bl	8004894 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005008:	f7ff fc44 	bl	8004894 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e187      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501a:	4b1b      	ldr	r3, [pc, #108]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d036      	beq.n	80050a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d016      	beq.n	8005068 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800503a:	4b15      	ldr	r3, [pc, #84]	; (8005090 <HAL_RCC_OscConfig+0x248>)
 800503c:	2201      	movs	r2, #1
 800503e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005040:	f7ff fc28 	bl	8004894 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005048:	f7ff fc24 	bl	8004894 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e167      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 800505c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x200>
 8005066:	e01b      	b.n	80050a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005068:	4b09      	ldr	r3, [pc, #36]	; (8005090 <HAL_RCC_OscConfig+0x248>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506e:	f7ff fc11 	bl	8004894 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005074:	e00e      	b.n	8005094 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005076:	f7ff fc0d 	bl	8004894 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d907      	bls.n	8005094 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e150      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
 8005088:	40023800 	.word	0x40023800
 800508c:	42470000 	.word	0x42470000
 8005090:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005094:	4b88      	ldr	r3, [pc, #544]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1ea      	bne.n	8005076 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8097 	beq.w	80051dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b2:	4b81      	ldr	r3, [pc, #516]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	4b7d      	ldr	r3, [pc, #500]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	4a7c      	ldr	r2, [pc, #496]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6413      	str	r3, [r2, #64]	; 0x40
 80050ce:	4b7a      	ldr	r3, [pc, #488]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050da:	2301      	movs	r3, #1
 80050dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050de:	4b77      	ldr	r3, [pc, #476]	; (80052bc <HAL_RCC_OscConfig+0x474>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d118      	bne.n	800511c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ea:	4b74      	ldr	r3, [pc, #464]	; (80052bc <HAL_RCC_OscConfig+0x474>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a73      	ldr	r2, [pc, #460]	; (80052bc <HAL_RCC_OscConfig+0x474>)
 80050f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f6:	f7ff fbcd 	bl	8004894 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fe:	f7ff fbc9 	bl	8004894 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e10c      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005110:	4b6a      	ldr	r3, [pc, #424]	; (80052bc <HAL_RCC_OscConfig+0x474>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d106      	bne.n	8005132 <HAL_RCC_OscConfig+0x2ea>
 8005124:	4b64      	ldr	r3, [pc, #400]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005128:	4a63      	ldr	r2, [pc, #396]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	6713      	str	r3, [r2, #112]	; 0x70
 8005130:	e01c      	b.n	800516c <HAL_RCC_OscConfig+0x324>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b05      	cmp	r3, #5
 8005138:	d10c      	bne.n	8005154 <HAL_RCC_OscConfig+0x30c>
 800513a:	4b5f      	ldr	r3, [pc, #380]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	4a5e      	ldr	r2, [pc, #376]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005140:	f043 0304 	orr.w	r3, r3, #4
 8005144:	6713      	str	r3, [r2, #112]	; 0x70
 8005146:	4b5c      	ldr	r3, [pc, #368]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	4a5b      	ldr	r2, [pc, #364]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	6713      	str	r3, [r2, #112]	; 0x70
 8005152:	e00b      	b.n	800516c <HAL_RCC_OscConfig+0x324>
 8005154:	4b58      	ldr	r3, [pc, #352]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005158:	4a57      	ldr	r2, [pc, #348]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	6713      	str	r3, [r2, #112]	; 0x70
 8005160:	4b55      	ldr	r3, [pc, #340]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	4a54      	ldr	r2, [pc, #336]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005166:	f023 0304 	bic.w	r3, r3, #4
 800516a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d015      	beq.n	80051a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005174:	f7ff fb8e 	bl	8004894 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517a:	e00a      	b.n	8005192 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800517c:	f7ff fb8a 	bl	8004894 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	; 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e0cb      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005192:	4b49      	ldr	r3, [pc, #292]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0ee      	beq.n	800517c <HAL_RCC_OscConfig+0x334>
 800519e:	e014      	b.n	80051ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a0:	f7ff fb78 	bl	8004894 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a6:	e00a      	b.n	80051be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a8:	f7ff fb74 	bl	8004894 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e0b5      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051be:	4b3e      	ldr	r3, [pc, #248]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1ee      	bne.n	80051a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d105      	bne.n	80051dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d0:	4b39      	ldr	r3, [pc, #228]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	4a38      	ldr	r2, [pc, #224]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80051d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80a1 	beq.w	8005328 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051e6:	4b34      	ldr	r3, [pc, #208]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d05c      	beq.n	80052ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d141      	bne.n	800527e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fa:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <HAL_RCC_OscConfig+0x478>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005200:	f7ff fb48 	bl	8004894 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005208:	f7ff fb44 	bl	8004894 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e087      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521a:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f0      	bne.n	8005208 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69da      	ldr	r2, [r3, #28]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	019b      	lsls	r3, r3, #6
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	085b      	lsrs	r3, r3, #1
 800523e:	3b01      	subs	r3, #1
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005248:	061b      	lsls	r3, r3, #24
 800524a:	491b      	ldr	r1, [pc, #108]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 800524c:	4313      	orrs	r3, r2
 800524e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005250:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <HAL_RCC_OscConfig+0x478>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005256:	f7ff fb1d 	bl	8004894 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525e:	f7ff fb19 	bl	8004894 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e05c      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005270:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <HAL_RCC_OscConfig+0x416>
 800527c:	e054      	b.n	8005328 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527e:	4b10      	ldr	r3, [pc, #64]	; (80052c0 <HAL_RCC_OscConfig+0x478>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005284:	f7ff fb06 	bl	8004894 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528c:	f7ff fb02 	bl	8004894 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e045      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529e:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x444>
 80052aa:	e03d      	b.n	8005328 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d107      	bne.n	80052c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e038      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40007000 	.word	0x40007000
 80052c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052c4:	4b1b      	ldr	r3, [pc, #108]	; (8005334 <HAL_RCC_OscConfig+0x4ec>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d028      	beq.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052dc:	429a      	cmp	r2, r3
 80052de:	d121      	bne.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d11a      	bne.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052f4:	4013      	ands	r3, r2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d111      	bne.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	3b01      	subs	r3, #1
 800530e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005310:	429a      	cmp	r2, r3
 8005312:	d107      	bne.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005320:	429a      	cmp	r2, r3
 8005322:	d001      	beq.n	8005328 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023800 	.word	0x40023800

08005338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0cc      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800534c:	4b68      	ldr	r3, [pc, #416]	; (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d90c      	bls.n	8005374 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b65      	ldr	r3, [pc, #404]	; (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005362:	4b63      	ldr	r3, [pc, #396]	; (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d001      	beq.n	8005374 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0b8      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d020      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800538c:	4b59      	ldr	r3, [pc, #356]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a58      	ldr	r2, [pc, #352]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005396:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053a4:	4b53      	ldr	r3, [pc, #332]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	4a52      	ldr	r2, [pc, #328]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b0:	4b50      	ldr	r3, [pc, #320]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	494d      	ldr	r1, [pc, #308]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d044      	beq.n	8005458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d107      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053d6:	4b47      	ldr	r3, [pc, #284]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d119      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e07f      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d003      	beq.n	80053f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d107      	bne.n	8005406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f6:	4b3f      	ldr	r3, [pc, #252]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e06f      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005406:	4b3b      	ldr	r3, [pc, #236]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e067      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005416:	4b37      	ldr	r3, [pc, #220]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f023 0203 	bic.w	r2, r3, #3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4934      	ldr	r1, [pc, #208]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005424:	4313      	orrs	r3, r2
 8005426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005428:	f7ff fa34 	bl	8004894 <HAL_GetTick>
 800542c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542e:	e00a      	b.n	8005446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005430:	f7ff fa30 	bl	8004894 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	f241 3288 	movw	r2, #5000	; 0x1388
 800543e:	4293      	cmp	r3, r2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e04f      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005446:	4b2b      	ldr	r3, [pc, #172]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 020c 	and.w	r2, r3, #12
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	429a      	cmp	r2, r3
 8005456:	d1eb      	bne.n	8005430 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005458:	4b25      	ldr	r3, [pc, #148]	; (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d20c      	bcs.n	8005480 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005466:	4b22      	ldr	r3, [pc, #136]	; (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800546e:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d001      	beq.n	8005480 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e032      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800548c:	4b19      	ldr	r3, [pc, #100]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	4916      	ldr	r1, [pc, #88]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	4313      	orrs	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054aa:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	490e      	ldr	r1, [pc, #56]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054be:	f000 f821 	bl	8005504 <HAL_RCC_GetSysClockFreq>
 80054c2:	4602      	mov	r2, r0
 80054c4:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	091b      	lsrs	r3, r3, #4
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	490a      	ldr	r1, [pc, #40]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 80054d0:	5ccb      	ldrb	r3, [r1, r3]
 80054d2:	fa22 f303 	lsr.w	r3, r2, r3
 80054d6:	4a09      	ldr	r2, [pc, #36]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80054d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054da:	4b09      	ldr	r3, [pc, #36]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff f8ca 	bl	8004678 <HAL_InitTick>

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40023c00 	.word	0x40023c00
 80054f4:	40023800 	.word	0x40023800
 80054f8:	08005f24 	.word	0x08005f24
 80054fc:	20000010 	.word	0x20000010
 8005500:	20000014 	.word	0x20000014

08005504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005508:	b094      	sub	sp, #80	; 0x50
 800550a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	647b      	str	r3, [r7, #68]	; 0x44
 8005510:	2300      	movs	r3, #0
 8005512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005514:	2300      	movs	r3, #0
 8005516:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800551c:	4b79      	ldr	r3, [pc, #484]	; (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 030c 	and.w	r3, r3, #12
 8005524:	2b08      	cmp	r3, #8
 8005526:	d00d      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0x40>
 8005528:	2b08      	cmp	r3, #8
 800552a:	f200 80e1 	bhi.w	80056f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_RCC_GetSysClockFreq+0x34>
 8005532:	2b04      	cmp	r3, #4
 8005534:	d003      	beq.n	800553e <HAL_RCC_GetSysClockFreq+0x3a>
 8005536:	e0db      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005538:	4b73      	ldr	r3, [pc, #460]	; (8005708 <HAL_RCC_GetSysClockFreq+0x204>)
 800553a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800553c:	e0db      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800553e:	4b73      	ldr	r3, [pc, #460]	; (800570c <HAL_RCC_GetSysClockFreq+0x208>)
 8005540:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005542:	e0d8      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005544:	4b6f      	ldr	r3, [pc, #444]	; (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800554c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800554e:	4b6d      	ldr	r3, [pc, #436]	; (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d063      	beq.n	8005622 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800555a:	4b6a      	ldr	r3, [pc, #424]	; (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	099b      	lsrs	r3, r3, #6
 8005560:	2200      	movs	r2, #0
 8005562:	63bb      	str	r3, [r7, #56]	; 0x38
 8005564:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556c:	633b      	str	r3, [r7, #48]	; 0x30
 800556e:	2300      	movs	r3, #0
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
 8005572:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005576:	4622      	mov	r2, r4
 8005578:	462b      	mov	r3, r5
 800557a:	f04f 0000 	mov.w	r0, #0
 800557e:	f04f 0100 	mov.w	r1, #0
 8005582:	0159      	lsls	r1, r3, #5
 8005584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005588:	0150      	lsls	r0, r2, #5
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4621      	mov	r1, r4
 8005590:	1a51      	subs	r1, r2, r1
 8005592:	6139      	str	r1, [r7, #16]
 8005594:	4629      	mov	r1, r5
 8005596:	eb63 0301 	sbc.w	r3, r3, r1
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055a8:	4659      	mov	r1, fp
 80055aa:	018b      	lsls	r3, r1, #6
 80055ac:	4651      	mov	r1, sl
 80055ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055b2:	4651      	mov	r1, sl
 80055b4:	018a      	lsls	r2, r1, #6
 80055b6:	4651      	mov	r1, sl
 80055b8:	ebb2 0801 	subs.w	r8, r2, r1
 80055bc:	4659      	mov	r1, fp
 80055be:	eb63 0901 	sbc.w	r9, r3, r1
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055d6:	4690      	mov	r8, r2
 80055d8:	4699      	mov	r9, r3
 80055da:	4623      	mov	r3, r4
 80055dc:	eb18 0303 	adds.w	r3, r8, r3
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	462b      	mov	r3, r5
 80055e4:	eb49 0303 	adc.w	r3, r9, r3
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055f6:	4629      	mov	r1, r5
 80055f8:	024b      	lsls	r3, r1, #9
 80055fa:	4621      	mov	r1, r4
 80055fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005600:	4621      	mov	r1, r4
 8005602:	024a      	lsls	r2, r1, #9
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560a:	2200      	movs	r2, #0
 800560c:	62bb      	str	r3, [r7, #40]	; 0x28
 800560e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005610:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005614:	f7fa fe26 	bl	8000264 <__aeabi_uldivmod>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4613      	mov	r3, r2
 800561e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005620:	e058      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005622:	4b38      	ldr	r3, [pc, #224]	; (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	099b      	lsrs	r3, r3, #6
 8005628:	2200      	movs	r2, #0
 800562a:	4618      	mov	r0, r3
 800562c:	4611      	mov	r1, r2
 800562e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005632:	623b      	str	r3, [r7, #32]
 8005634:	2300      	movs	r3, #0
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
 8005638:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800563c:	4642      	mov	r2, r8
 800563e:	464b      	mov	r3, r9
 8005640:	f04f 0000 	mov.w	r0, #0
 8005644:	f04f 0100 	mov.w	r1, #0
 8005648:	0159      	lsls	r1, r3, #5
 800564a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800564e:	0150      	lsls	r0, r2, #5
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4641      	mov	r1, r8
 8005656:	ebb2 0a01 	subs.w	sl, r2, r1
 800565a:	4649      	mov	r1, r9
 800565c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800566c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005670:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005674:	ebb2 040a 	subs.w	r4, r2, sl
 8005678:	eb63 050b 	sbc.w	r5, r3, fp
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	00eb      	lsls	r3, r5, #3
 8005686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800568a:	00e2      	lsls	r2, r4, #3
 800568c:	4614      	mov	r4, r2
 800568e:	461d      	mov	r5, r3
 8005690:	4643      	mov	r3, r8
 8005692:	18e3      	adds	r3, r4, r3
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	464b      	mov	r3, r9
 8005698:	eb45 0303 	adc.w	r3, r5, r3
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056aa:	4629      	mov	r1, r5
 80056ac:	028b      	lsls	r3, r1, #10
 80056ae:	4621      	mov	r1, r4
 80056b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056b4:	4621      	mov	r1, r4
 80056b6:	028a      	lsls	r2, r1, #10
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056be:	2200      	movs	r2, #0
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	61fa      	str	r2, [r7, #28]
 80056c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056c8:	f7fa fdcc 	bl	8000264 <__aeabi_uldivmod>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4613      	mov	r3, r2
 80056d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	0c1b      	lsrs	r3, r3, #16
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	3301      	adds	r3, #1
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80056e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056ee:	e002      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056f0:	4b05      	ldr	r3, [pc, #20]	; (8005708 <HAL_RCC_GetSysClockFreq+0x204>)
 80056f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3750      	adds	r7, #80	; 0x50
 80056fc:	46bd      	mov	sp, r7
 80056fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005702:	bf00      	nop
 8005704:	40023800 	.word	0x40023800
 8005708:	00f42400 	.word	0x00f42400
 800570c:	007a1200 	.word	0x007a1200

08005710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005714:	4b03      	ldr	r3, [pc, #12]	; (8005724 <HAL_RCC_GetHCLKFreq+0x14>)
 8005716:	681b      	ldr	r3, [r3, #0]
}
 8005718:	4618      	mov	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20000010 	.word	0x20000010

08005728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800572c:	f7ff fff0 	bl	8005710 <HAL_RCC_GetHCLKFreq>
 8005730:	4602      	mov	r2, r0
 8005732:	4b05      	ldr	r3, [pc, #20]	; (8005748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	0a9b      	lsrs	r3, r3, #10
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	4903      	ldr	r1, [pc, #12]	; (800574c <HAL_RCC_GetPCLK1Freq+0x24>)
 800573e:	5ccb      	ldrb	r3, [r1, r3]
 8005740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005744:	4618      	mov	r0, r3
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40023800 	.word	0x40023800
 800574c:	08005f34 	.word	0x08005f34

08005750 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	220f      	movs	r2, #15
 800575e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005760:	4b12      	ldr	r3, [pc, #72]	; (80057ac <HAL_RCC_GetClockConfig+0x5c>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0203 	and.w	r2, r3, #3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800576c:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <HAL_RCC_GetClockConfig+0x5c>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005778:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <HAL_RCC_GetClockConfig+0x5c>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005784:	4b09      	ldr	r3, [pc, #36]	; (80057ac <HAL_RCC_GetClockConfig+0x5c>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	08db      	lsrs	r3, r3, #3
 800578a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005792:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <HAL_RCC_GetClockConfig+0x60>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0207 	and.w	r2, r3, #7
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	601a      	str	r2, [r3, #0]
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40023800 	.word	0x40023800
 80057b0:	40023c00 	.word	0x40023c00

080057b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e041      	b.n	800584a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f839 	bl	8005852 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4619      	mov	r1, r3
 80057f2:	4610      	mov	r0, r2
 80057f4:	f000 f9d8 	bl	8005ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b01      	cmp	r3, #1
 800587a:	d001      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e04e      	b.n	800591e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0201 	orr.w	r2, r2, #1
 8005896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a23      	ldr	r2, [pc, #140]	; (800592c <HAL_TIM_Base_Start_IT+0xc4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d022      	beq.n	80058e8 <HAL_TIM_Base_Start_IT+0x80>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058aa:	d01d      	beq.n	80058e8 <HAL_TIM_Base_Start_IT+0x80>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1f      	ldr	r2, [pc, #124]	; (8005930 <HAL_TIM_Base_Start_IT+0xc8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d018      	beq.n	80058e8 <HAL_TIM_Base_Start_IT+0x80>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1e      	ldr	r2, [pc, #120]	; (8005934 <HAL_TIM_Base_Start_IT+0xcc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d013      	beq.n	80058e8 <HAL_TIM_Base_Start_IT+0x80>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <HAL_TIM_Base_Start_IT+0xd0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00e      	beq.n	80058e8 <HAL_TIM_Base_Start_IT+0x80>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a1b      	ldr	r2, [pc, #108]	; (800593c <HAL_TIM_Base_Start_IT+0xd4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d009      	beq.n	80058e8 <HAL_TIM_Base_Start_IT+0x80>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a19      	ldr	r2, [pc, #100]	; (8005940 <HAL_TIM_Base_Start_IT+0xd8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <HAL_TIM_Base_Start_IT+0x80>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a18      	ldr	r2, [pc, #96]	; (8005944 <HAL_TIM_Base_Start_IT+0xdc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d111      	bne.n	800590c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b06      	cmp	r3, #6
 80058f8:	d010      	beq.n	800591c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0201 	orr.w	r2, r2, #1
 8005908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590a:	e007      	b.n	800591c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0201 	orr.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40010000 	.word	0x40010000
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800
 8005938:	40000c00 	.word	0x40000c00
 800593c:	40010400 	.word	0x40010400
 8005940:	40014000 	.word	0x40014000
 8005944:	40001800 	.word	0x40001800

08005948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b02      	cmp	r3, #2
 800595c:	d122      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b02      	cmp	r3, #2
 800596a:	d11b      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0202 	mvn.w	r2, #2
 8005974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f8ee 	bl	8005b6c <HAL_TIM_IC_CaptureCallback>
 8005990:	e005      	b.n	800599e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f8e0 	bl	8005b58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f8f1 	bl	8005b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d122      	bne.n	80059f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d11b      	bne.n	80059f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0204 	mvn.w	r2, #4
 80059c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2202      	movs	r2, #2
 80059ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f8c4 	bl	8005b6c <HAL_TIM_IC_CaptureCallback>
 80059e4:	e005      	b.n	80059f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f8b6 	bl	8005b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f8c7 	bl	8005b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d122      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d11b      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0208 	mvn.w	r2, #8
 8005a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2204      	movs	r2, #4
 8005a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f89a 	bl	8005b6c <HAL_TIM_IC_CaptureCallback>
 8005a38:	e005      	b.n	8005a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f88c 	bl	8005b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f89d 	bl	8005b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b10      	cmp	r3, #16
 8005a58:	d122      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f003 0310 	and.w	r3, r3, #16
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	d11b      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f06f 0210 	mvn.w	r2, #16
 8005a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2208      	movs	r2, #8
 8005a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f870 	bl	8005b6c <HAL_TIM_IC_CaptureCallback>
 8005a8c:	e005      	b.n	8005a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f862 	bl	8005b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f873 	bl	8005b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d10e      	bne.n	8005acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d107      	bne.n	8005acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0201 	mvn.w	r2, #1
 8005ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fe fd96 	bl	80045f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad6:	2b80      	cmp	r3, #128	; 0x80
 8005ad8:	d10e      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	2b80      	cmp	r3, #128	; 0x80
 8005ae6:	d107      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f902 	bl	8005cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d10e      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b10:	2b40      	cmp	r3, #64	; 0x40
 8005b12:	d107      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f838 	bl	8005b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d10e      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d107      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0220 	mvn.w	r2, #32
 8005b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f8cc 	bl	8005ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a40      	ldr	r2, [pc, #256]	; (8005cbc <TIM_Base_SetConfig+0x114>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d013      	beq.n	8005be8 <TIM_Base_SetConfig+0x40>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc6:	d00f      	beq.n	8005be8 <TIM_Base_SetConfig+0x40>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a3d      	ldr	r2, [pc, #244]	; (8005cc0 <TIM_Base_SetConfig+0x118>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00b      	beq.n	8005be8 <TIM_Base_SetConfig+0x40>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a3c      	ldr	r2, [pc, #240]	; (8005cc4 <TIM_Base_SetConfig+0x11c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d007      	beq.n	8005be8 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a3b      	ldr	r2, [pc, #236]	; (8005cc8 <TIM_Base_SetConfig+0x120>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3a      	ldr	r2, [pc, #232]	; (8005ccc <TIM_Base_SetConfig+0x124>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d108      	bne.n	8005bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a2f      	ldr	r2, [pc, #188]	; (8005cbc <TIM_Base_SetConfig+0x114>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d02b      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c08:	d027      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a2c      	ldr	r2, [pc, #176]	; (8005cc0 <TIM_Base_SetConfig+0x118>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d023      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2b      	ldr	r2, [pc, #172]	; (8005cc4 <TIM_Base_SetConfig+0x11c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d01f      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a2a      	ldr	r2, [pc, #168]	; (8005cc8 <TIM_Base_SetConfig+0x120>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d01b      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a29      	ldr	r2, [pc, #164]	; (8005ccc <TIM_Base_SetConfig+0x124>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d017      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a28      	ldr	r2, [pc, #160]	; (8005cd0 <TIM_Base_SetConfig+0x128>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a27      	ldr	r2, [pc, #156]	; (8005cd4 <TIM_Base_SetConfig+0x12c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00f      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a26      	ldr	r2, [pc, #152]	; (8005cd8 <TIM_Base_SetConfig+0x130>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00b      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a25      	ldr	r2, [pc, #148]	; (8005cdc <TIM_Base_SetConfig+0x134>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a24      	ldr	r2, [pc, #144]	; (8005ce0 <TIM_Base_SetConfig+0x138>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d003      	beq.n	8005c5a <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a23      	ldr	r2, [pc, #140]	; (8005ce4 <TIM_Base_SetConfig+0x13c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d108      	bne.n	8005c6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a0a      	ldr	r2, [pc, #40]	; (8005cbc <TIM_Base_SetConfig+0x114>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_Base_SetConfig+0xf8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a0c      	ldr	r2, [pc, #48]	; (8005ccc <TIM_Base_SetConfig+0x124>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d103      	bne.n	8005ca8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	615a      	str	r2, [r3, #20]
}
 8005cae:	bf00      	nop
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40010000 	.word	0x40010000
 8005cc0:	40000400 	.word	0x40000400
 8005cc4:	40000800 	.word	0x40000800
 8005cc8:	40000c00 	.word	0x40000c00
 8005ccc:	40010400 	.word	0x40010400
 8005cd0:	40014000 	.word	0x40014000
 8005cd4:	40014400 	.word	0x40014400
 8005cd8:	40014800 	.word	0x40014800
 8005cdc:	40001800 	.word	0x40001800
 8005ce0:	40001c00 	.word	0x40001c00
 8005ce4:	40002000 	.word	0x40002000

08005ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <__libc_init_array>:
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	4d0d      	ldr	r5, [pc, #52]	; (8005d48 <__libc_init_array+0x38>)
 8005d14:	4c0d      	ldr	r4, [pc, #52]	; (8005d4c <__libc_init_array+0x3c>)
 8005d16:	1b64      	subs	r4, r4, r5
 8005d18:	10a4      	asrs	r4, r4, #2
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	42a6      	cmp	r6, r4
 8005d1e:	d109      	bne.n	8005d34 <__libc_init_array+0x24>
 8005d20:	4d0b      	ldr	r5, [pc, #44]	; (8005d50 <__libc_init_array+0x40>)
 8005d22:	4c0c      	ldr	r4, [pc, #48]	; (8005d54 <__libc_init_array+0x44>)
 8005d24:	f000 f83e 	bl	8005da4 <_init>
 8005d28:	1b64      	subs	r4, r4, r5
 8005d2a:	10a4      	asrs	r4, r4, #2
 8005d2c:	2600      	movs	r6, #0
 8005d2e:	42a6      	cmp	r6, r4
 8005d30:	d105      	bne.n	8005d3e <__libc_init_array+0x2e>
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d38:	4798      	blx	r3
 8005d3a:	3601      	adds	r6, #1
 8005d3c:	e7ee      	b.n	8005d1c <__libc_init_array+0xc>
 8005d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d42:	4798      	blx	r3
 8005d44:	3601      	adds	r6, #1
 8005d46:	e7f2      	b.n	8005d2e <__libc_init_array+0x1e>
 8005d48:	08005f44 	.word	0x08005f44
 8005d4c:	08005f44 	.word	0x08005f44
 8005d50:	08005f44 	.word	0x08005f44
 8005d54:	08005f48 	.word	0x08005f48

08005d58 <memcmp>:
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	3901      	subs	r1, #1
 8005d5c:	4402      	add	r2, r0
 8005d5e:	4290      	cmp	r0, r2
 8005d60:	d101      	bne.n	8005d66 <memcmp+0xe>
 8005d62:	2000      	movs	r0, #0
 8005d64:	e005      	b.n	8005d72 <memcmp+0x1a>
 8005d66:	7803      	ldrb	r3, [r0, #0]
 8005d68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d001      	beq.n	8005d74 <memcmp+0x1c>
 8005d70:	1b18      	subs	r0, r3, r4
 8005d72:	bd10      	pop	{r4, pc}
 8005d74:	3001      	adds	r0, #1
 8005d76:	e7f2      	b.n	8005d5e <memcmp+0x6>

08005d78 <memcpy>:
 8005d78:	440a      	add	r2, r1
 8005d7a:	4291      	cmp	r1, r2
 8005d7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005d80:	d100      	bne.n	8005d84 <memcpy+0xc>
 8005d82:	4770      	bx	lr
 8005d84:	b510      	push	{r4, lr}
 8005d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d8e:	4291      	cmp	r1, r2
 8005d90:	d1f9      	bne.n	8005d86 <memcpy+0xe>
 8005d92:	bd10      	pop	{r4, pc}

08005d94 <memset>:
 8005d94:	4402      	add	r2, r0
 8005d96:	4603      	mov	r3, r0
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d100      	bne.n	8005d9e <memset+0xa>
 8005d9c:	4770      	bx	lr
 8005d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005da2:	e7f9      	b.n	8005d98 <memset+0x4>

08005da4 <_init>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	bf00      	nop
 8005da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005daa:	bc08      	pop	{r3}
 8005dac:	469e      	mov	lr, r3
 8005dae:	4770      	bx	lr

08005db0 <_fini>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	bf00      	nop
 8005db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db6:	bc08      	pop	{r3}
 8005db8:	469e      	mov	lr, r3
 8005dba:	4770      	bx	lr
